import numpy   as np
import os, sys
import gmsh

gmshlib = os.environ["gmshLibraryPath"]
sys.path.append( gmshlib )
import generateRectangularBox  as box
import generateXYplaneArcCurve as arc

# ------------------------------------------------- #
# --- [1] initialization of the gmsh            --- #
# ------------------------------------------------- #
gmsh.initialize()
gmsh.option.setNumber( "General.Terminal", 1 )
gmsh.model.add( "model" )

# ------------------------------------------------- #
# --- [2] initialize settings                   --- #
# ------------------------------------------------- #
ptsDim , lineDim , surfDim , voluDim  =  0,  1,  2,  3
pts    , line    , surf    , volu     = {}, {}, {}, {}
ptsPhys, linePhys, surfPhys, voluPhys = {}, {}, {}, {}
lc                                    = 0.1
x_, y_, z_, lc_, tag_                 = 0, 1, 2, 3, 4

# ------------------------------------------------- #
# --- [3] Modeling                              --- #
# ------------------------------------------------- #

radius  = 1.0
origin  = [0.0,0.0]
th1     = 0.0
th2     = 180.0
zoffset = 0.0

# -- test edge points             -- #
div     = 14
th      = np.linspace( 0.0, 180.0, div  )
rad_x   = radius*np.cos( th/180.0*np.pi )
rad_y   = radius*np.sin( th/180.0*np.pi )

# -- outside :: cylindrical shell -- #
out_rad = 2.0
ret     = arc.generateXYplaneArcCurve( radius=out_rad, origin=origin, th1=th1, th2=180.0, \
                                       zoffset=0.0, lc=1.0, ysign="+" )
line["ArcLine1"]  = ret["Lines"]["line1"]
line["ArcLine2"]  = ret["Lines"]["line2"]
pts["ArcEndPts1"] = ret["pts"]["+x"]
pts["ArcEndPts2"] = ret["pts"]["-x"]

# -- point on pole-radius -- #
for ik in range( div   ):
    key            = "rad_{0:02}".format(ik+1)
    pts[key]       = [ rad_x[ik], rad_y[ik], 0.0, lc, 0 ]
    pts[key][tag_] = gmsh.model.occ.addPoint( pts[key][x_], pts[key][y_], pts[key][z_], \
                                              meshSize=pts[key][lc_] )
# -- line on pole-radius  -- #
linekeys = []
for ik in range( div-1 ):
    key1, key2     = "rad_{0:02}".format(ik+1), "rad_{0:02}".format(ik+2)
    linekey        = "rad_{0:02}_{1:02}".format( ik+1, ik+2 )
    line[linekey]  = gmsh.model.occ.addLine( pts[key1][tag_], pts[key2][tag_] )
    linekeys.append( linekey )

# -- end shorting         -- #
key1, key2     = "rad_{0:02}".format( div ), "ArcEndPts2"
line["EndLine2"]  = gmsh.model.occ.addLine( pts[key1][tag_], pts[key2][tag_] )
key1, key2     = "ArcEndPts1", "rad_{0:02}".format( 1 )
line["EndLine1"]  = gmsh.model.occ.addLine( pts[key1][tag_], pts[key2][tag_] )

# -- line group & surface -- #
edgeLineLoop       = [ line[linekey] for linekey in linekeys ] + [ line["EndLine2"], - line["ArcLine2"], - line["ArcLine1"], line["EndLine1"] ]
LineLoopGroup      = gmsh.model.occ.addCurveLoop( edgeLineLoop )
surf["edgeFan"]    = gmsh.model.occ.addPlaneSurface( [ LineLoopGroup ] )
    
# ------------------------------------------------- #
# --- [4] Physical Grouping                     --- #
# ------------------------------------------------- #
gmsh.model.occ.synchronize()
# surfPhys["xxxxx"] = gmsh.model.addPhysicalGroup( surfDim, [ surf["xxx"] ], tag=201 )
# surfPhys["other"] = gmsh.model.addPhysicalGroup( surfDim, [ 2 ]          , tag=202 )
# voluPhys["volu1"] = gmsh.model.addPhysicalGroup( voluDim, [ volu["vol"] ], tag=301 )


# ------------------------------------------------- #
# --- [2] post process                          --- #
# ------------------------------------------------- #
gmsh.model.occ.synchronize()
gmsh.model.mesh.generate(2)
gmsh.write( "model.geo_unrolled" )
gmsh.write( "model.msh" )
gmsh.finalize()

