import numpy as np

# ========================================================= #
# ===                                    === #
# ========================================================= #

def ex1( Data=None ):

    # ------------------------------------------------- #
    # --- [1] preparation                           --- #
    # ------------------------------------------------- #
    if vtk.VTK_ID_TYPE == 12:
        ID_TYPE = np.int64
    else:
        ID_TYPE = np.int32
    nData = Data.shape[0]

    #  -- [1-1] points                              --  #
    points = vtk.vtkPoints()
    points.SetData( vtknp.vtk_to_numpy( Data, deep=True ) )

    #  -- [1-2] cell type                           --  #
    cell_type = np.full( ( nData,), vtk.VTK_VERTEX )
    cell_type = cell_type.astype( np.uint8 )
    cell_type = npv.numpy_to_vtk( cell_type )

    #  -- [1-3] offset                              --  #
    offset       = np.arange( nData )
    offset       = npv.numpy_to_vtkIdTypeArray( ( offset ).astype( ID_TYPE ) )

    #  -- [1-4]                                     --  #
    elems        = np.arange( nData )
    nVertArray   = np.ones( (nData,) )
    elemIDs      = np.concatenate( [ nVertArray[:,None], \
                                     elems     [:,None] ], axis=1 )
    elemIDs      = npv.numpy_to_vtkIdTypeArray( np.ravel( elemIDs ) )
    cellArray    = vtk.vtkCellArray()
    cellArray.SetCells( nData, elemIDs )
    
    #  -- [1-5] ugrid                               --  #
    uGrid = vtk.vtkUnstructuredGrid()
    uGrid.SetPoints(points)
    uGrid.SetCells( cell_type, offset, vtkcells )

    return( uGrid )

# ========================================================= #
# ===   実行部                                          === #
# ========================================================= #

if ( __name__=="__main__" ):
    import nkUtilities.equiSpaceGrid as esg
    x1MinMaxNum = [ 0.0, 1.0, 11 ]
    x2MinMaxNum = [ 0.0, 1.0, 11 ]
    x3MinMaxNum = [ 0.0, 1.0, 11 ]
    ret         = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                     x3MinMaxNum=x3MinMaxNum, returnType = "point" )
    Data = ret
    ex1( Data=Data )
