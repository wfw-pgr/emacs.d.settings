import sys
import numpy                      as np
import nkUtilities.LoadConfig     as lcf
import nkUtilities.cMapTri        as cmt
import nkUtilities.configSettings as cfs


# ========================================================= #
# ===  display                                          === #
# ========================================================= #
def display( datFile=None, pngFile=None, config=None ):
    # ------------------------------------------------- #
    # --- [1] Arguments                             --- #
    # ------------------------------------------------- #
    if ( config  is None ): config  = lcf.LoadConfig()
    if ( datFile is None ): datFile = "dat/x{0}.dat"
    if ( pngFile is None ): pngFile = "png/x{0}.png"

    # ------------------------------------------------- #
    # --- [2] Fetch Data                            --- #
    # ------------------------------------------------- #
    with open( datFile.format( "Ref" ), "r" ) as f:
        refData = np.loadtxt( f )
    with open( datFile.format( "Itp" ), "r" ) as f:
        itpData = np.loadtxt( f )
        
    # ------------------------------------------------- #
    # --- [3] config Settings                       --- #
    # ------------------------------------------------- #
    cfs.configSettings( configType="cMap_def", config=config )
    config["FigSize"]        = (5,5)
    config["cmp_position"]   = [0.16,0.12,0.97,0.88]
    config["xTitle"]         = "X"
    config["yTitle"]         = "Y"
    config["cmp_xAutoRange"] = True
    config["cmp_yAutoRange"] = True
    config["cmp_xRange"]     = [-5.0,+5.0]
    config["cmp_yRange"]     = [-5.0,+5.0]
    
    # ------------------------------------------------- #
    # --- [4] plot Figure                           --- #
    # ------------------------------------------------- #
    cmt.cMapTri( xAxis=refData[:,0], yAxis=refData[:,1], cMap=refData[:,2], \
                 pngFile=pngFile.format( "Ref" ), config=config )
    cmt.cMapTri( xAxis=itpData[:,0], yAxis=itpData[:,1], cMap=itpData[:,2], \
                 pngFile=pngFile.format( "Itp" ), config=config )

    # ------------------------------------------------- #
    # --- [5] check 1D profile                      --- #
    # ------------------------------------------------- #
    val   = 0.0
    eps   = 1.e-5
    x_ref = refData[:,0]
    y_ref = refData[:,1]
    z_ref = refData[:,2]
    x_itp = itpData[:,0]
    y_itp = itpData[:,1]
    z_itp = itpData[:,2]
    ref_index = np.where( ( val-eps < x_ref ) & ( val+eps > x_ref ) )
    itp_index = np.where( ( val-eps < x_itp ) & ( val+eps > x_itp ) )
    y_ref = y_ref[ ref_index ]
    z_ref = z_ref[ ref_index ]
    y_itp = y_itp[ itp_index ]
    z_itp = z_itp[ itp_index ]
    print( y_ref.shape, z_ref.shape )
    print( y_itp.shape, z_itp.shape )

    import nkUtilities.plot1D as pl1
    fig = pl1.plot1D( pngFile="png/check1d.png", config=config )
    fig.add__plot( xAxis=y_itp, yAxis=z_itp )
    fig.add__plot( xAxis=y_ref, yAxis=z_ref, marker=".", linewidth=0.0 )
    fig.set__axis()
    fig.save__figure()

    
# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):
    display()
    

