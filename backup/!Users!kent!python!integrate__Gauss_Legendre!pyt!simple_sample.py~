# -*- coding: utf-8 -*-
"""
ガウス求積(ガウス則)で多項式の[-1,1]における積分を計算する
This code is fetched from.... 
https://lascode.com/gauss-quadrature-python/
"""

import sympy as sy
import numpy as np

z = sy.Symbol('z')
f = z**4  # 積分したい関数. 2n-1次以下にする
n = 3  # 積分点数 (整数値)


# ルジャンドル多項式のゼロ点x_iと重みw_iを求める
def leg_weights_roots(n):
    x = sy.Symbol('x')
    roots = sy.Poly(sy.legendre(n, x)).all_roots()  # n次ルジャンドル多項式の根を求める
    x_i = [rt.evalf(20) for rt in roots] 
    w_i = [(2*(1-rt**2)/(n*sy.legendre(n-1, rt))**2).evalf(20) for rt in roots]  # 重み
    return x_i, w_i


# ガウス求積を実行する
def gauss_quadrature(f,n):
    xx, ww = leg_weights_roots(n)  # xx:零点のリスト, ww:重みのリスト
    integ = 0
    for i in range(n):
        integ += ww[i]*f.subs(z,xx[i]).evalf()
    return integ


print(gauss_quadrature(f, n))
