import numpy            as np
import numpy.ctypeslib  as Flib
import ctypes, sys
import os.path

# ================================================================ #
# === biotSavartLaw                                            === #
# ================================================================ #
def biotSavartLaw( BField=None, coil=None, I0=1.0 ):
    # ---------------------------------------- #
    # --- [1]   引数チェック               --- #
    # ---------------------------------------- #
    if ( BField is None ): sys.exit( "[biotSavartLaw] BField ???" )
    if ( coil   is None ): sys.exit( "[biotSavartLaw] coil   ???" )

    # ---------------------------------------- #
    # --- [2]   引数準備                   --- #
    # ---------------------------------------- #
    #  -- [2-1] 使用する引数を準備         --  #
    nBpt, tB = BField.shape[0], BField.shape[1]
    nLpt, tC =   coil.shape[0],   coil.shape[1]
    if ( tB != 6 ): sys.exit( "[biotSavartLaw] BField.shape != [:,6]" )
    if ( tC != 3 ): sys.exit( "[biotSavartLaw]   coil.shape != [:,3]" )
    #  -- [2-2] Fortranサイズへ変換        --  #
    BField_  =     np.array( BField, dtype=np.float64  )
    coil_    =     np.array( coil  , dtype=np.float64  )
    I0_      =     np.array( I0    , dtype=np.float64  )
    nBpt_    = ctypes.byref( ctypes.c_int64( nBpt )  )
    nLpt_    = ctypes.byref( ctypes.c_int64( nLpt )  )

    # ---------------------------------------- #
    # --- [3]   ライブラリをロード         --- #
    # ---------------------------------------- #
    #  -- [3-1] ライブラリを定義           --  #
    path   = os.path.expanduser('~') + "/.python/lib/electromagnetism/"
    pyLIB  = Flib.load_library( 'pylib.so', path )
    #  -- [3-2] 入出力管理                 --  #
    pyLIB.calc__biotsavartbfield_.argtypes = [
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        ctypes.POINTER( ctypes.c_int64   ),
        ctypes.POINTER( ctypes.c_int64   ),
    ]
    pyLIB.calc__biotsavartbfield_.restype = ctypes.c_void_p

    # ---------------------------------------- #
    # --- [4]   関数呼出 / 返却            --- #
    # ---------------------------------------- #
    pyLIB.calc__biotsavartbfield_( BField_, coil_, I0_, nBpt_, nLpt_ )
    BField = np.copy( BField_ )
    return( BField )


# ================================================================ #
# ===  biot Savart Law                                         === #
# ================================================================ #
if ( __name__=='__main__' ):
    # ---- テスト用 プロファイル ---- #
    nLpt          = 201
    coil          = np.zeros( (nLpt,3) )
    coil[:,2]     = np.linspace( -10.0, 10.0, nLpt )
    import nkUtilities.equiSpaceGrid3D as esg
    x1MinMaxNum   = [ -1.0, 1.0, 101 ]
    x2MinMaxNum   = [ -1.0, 1.0, 101 ]
    x3MinMaxNum   = [  0.0, 0.0,   1 ]
    pos           = esg.equiSpaceGrid3D( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                         x3MinMaxNum=x3MinMaxNum, returnType="point"       )
    nBpt          = pos.shape[0]
    BField        = np.zeros( (nBpt,6) )
    BField[:,0:3] = pos[:,:]
    BField        = biotSavartLaw( BField=BField, coil=coil, I0=1.0 )
    import nkUtilities.cMapTri as cmt
    cmt.cMapTri( xAxis=BField[:,0], yAxis=BField[:,1], cMap=BField[:,3], pngFile="out.png" )
