import os, sys, re
import numpy         as np


# ========================================================= #
# ===  extract b_integ field from EMSolution .out file  === #
# ========================================================= #

def extract__BFieldOutput( num=None, mode=None, draw_cMap=True ):

    # ------------------------------------------------- #
    # --- [1] Arguments                             --- #
    # ------------------------------------------------- #
    if ( mode is None ): mode = "pst"
    if ( num  is None ):
        inpFile = "out/ems_{0}.out"  .format( mode )
        outFile = "dat/ems_{0}.field".format( mode )
    else:
        inpFile = "out/ems_{0}_{1:02}.out"  .format( mode, num )
        outFile = "dat/ems_{0}_{1:02}.field".format( mode, num )
    
    # ------------------------------------------------- #
    # --- [2] search by regular expression          --- #
    # ------------------------------------------------- #
    with open( inpFile, "r" ) as f:
        lines = f.readlines()

    pattern = r"B by v_element integration"

    for iL, line in enumerate( lines ):
        research = re.search( pattern, line )
        if ( research ): break

    # ------------------------------------------------- #
    # --- [3] write Data in outFile :: middle File  --- #
    # ------------------------------------------------- #

    lines = lines[(iL+4):]
    with open( outFile, "w" ) as f:
        f.write( "# " + lines[0] )
        for line in lines[1:]:
            if ( len( line.split() ) == 8 ):
                f.write( line )
            else:
                break
        print( "[extract__BFieldOutput] output :: {0}".format( outFile ) )

    # ------------------------------------------------- #
    # --- [4] write Data without index & abs value  --- #
    # ------------------------------------------------- #

    with open( outFile, "r" ) as f:
        Data = np.loadtxt( f )
    Data = np.copy( Data[:,1:7] )

    with open( outFile, "w" ) as f:
        np.savetxt( f, Data, fmt="%15.8e" )

    # ------------------------------------------------- #
    # --- [5] show bfield_extracted                 --- #
    # ------------------------------------------------- #
    if ( draw_cMap ):
        import nkUtilities.load__config as lcf
        import nkUtilities.cMapTri      as cmt
        config  = lcf.load__config()
        xAxis   = Data[:,0]
        yAxis   = Data[:,1]
        cMap    = Data[:,5]
        pngFile = "png/bfield_extracted.png"
        cmt.cMapTri( xAxis=xAxis, yAxis=yAxis, cMap=cMap, config=config, pngFile=pngFile )

        

# ========================================================= #
# ===  merge__distributed Files                         === #
# ========================================================= #

def merge__BFieldOutput( init=None, last=None ):
    
    # ------------------------------------------------- #
    # --- [1] Arguments                             --- #
    # ------------------------------------------------- #

    if ( init is None ): sys.exit( "[merge__BFieldOutput] init == ???" )
    if ( last is None ): sys.exit( "[merge__BFieldOutput] last == ???" )
    
    inpFile = "dat/ems_pst_{0:02}.field"
    outFile = "dat/ems_pst_total.field"
    fldFile = "dat/ems_pst.field"
    
    import nkMDTRoutines.get__jobinfo as gji
    info  = gji.get__jobinfo()
    const = info["config"]
    
    # ------------------------------------------------- #
    # --- [2] load file & merge                     --- #
    # ------------------------------------------------- #

    nCmp     = 6
    lstack   = []
    for num in range( init, last+1 ):
        print( "[merge__BFieldOutput] loading {0}...".format( inpFile.format( num ) ) )
        with open( inpFile.format( num ), "r" ) as f:
            cData_ = f.readlines()
        lstack = lstack + cData_
    with open( outFile, "w" ) as f:
        f.write( "# xp yp zp bx by bz\n" )
        f.write( "# {0} {1}\n"        .format( const["ems3D.LKr"]*const["ems3D.LJr"]*const["ems3D.LIr"], nCmp ) )
        f.write( "# {0} {1} {2} {3}\n".format( const["ems3D.LKr"],const["ems3D.LJr"],const["ems3D.LIr"], nCmp ) )
        for line in lstack:
            f.write( line )
    print( "[merge__BFIeldOutput] output filename :: {0} ".format( outFile ) )

    with open( outFile, "r" ) as f:
        Data = np.loadtxt( f )
    with open( fldFile, "w" ) as f:
        np.savetxt( f, Data, fmt="%15.8e" )
        
    # ------------------------------------------------- #
    # --- [3] confirmation                          --- #
    # ------------------------------------------------- #

    Flag__structuredCheck = False
    if ( Flag__structuredCheck ):
        import nkUtilities.load__pointFile as lpf
        Data = lpf.load__pointFile( inpFile=outFile, returnType="structured" )
        print( "[merge__BFieldOutput] output shape :: ", Data.shape )


    
        
# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):

    import nkUtilities.genArgs as gar
    args = gar.genArgs()
    mode = args["mode"]

    print( "[extract__BFieldOutput] distributed file ?? >> ( def. no ) (y/n) ", end="" )
    yorn = str( input() )

    
    if ( yorn.lower() == "y" ):

        print( "[extract__BFieldOutput] init >>  ( def. 1 ) ", end="" )
        init = int( input() )
        print( "[extract__BFieldOutput] last >>  ( def. 1 ) ", end="" )
        last = int( input() )

        for num in range( init, last+1 ):
            extract__BFieldOutput( num=num, mode=mode )
        merge__BFieldOutput( init=init, last=last )

    else:
        
        num = None
        extract__BFieldOutput( num=num, mode=mode )

        import display__main as dis
        dis.display__main()
