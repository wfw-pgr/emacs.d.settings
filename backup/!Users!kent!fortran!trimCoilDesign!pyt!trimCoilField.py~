import numpy                          as np
import nkUtilities.plot1D             as pl1
import nkUtilities.LoadConfig         as lcf
import nkUtilities.configSettings     as cfs
import nkUtilities.cMapTri            as cmt
import electromagnetism.biotSavartLaw as bio

# ========================================================= #
# ===  trimCoilField                                    === #
# ========================================================= #
def trimCoilField():
    # ------------------------------------------------- #
    # --- [1] Settings                              --- #
    # ------------------------------------------------- #
    config   = lcf.LoadConfig()
    rhos     = [ 0.10, 0.20, 0.35, 0.62 ]
    nCoils   = len( rhos )
    kinf     = 0.99
    rhoY     = 0.1075
    drho     = 0.004
    nLpt     = 500
    zoffset  = 0.120
    colors   = [ "red", "blue", "green", "purple" ]
    x_,y_,z_ = 0, 1, 2
    # ------------------------------------------------- #
    # --- [2] center orbit calculation              --- #
    # ------------------------------------------------- #
    coils    = np.zeros( (nLpt,3,nCoils ) )
    theta    = np.linspace( 0.0, 2.0*np.pi, nLpt )
    for i,rho in enumerate( rhos ):
        Ycnt          = kinf * rhoY * ( np.sqrt( 1.0 + ( rho / rhoY )**2 ) - 1.0 )
        coils[:,x_,i] = rho * np.cos( theta )
        coils[:,y_,i] = rho * np.sin( theta ) + Ycnt
        coils[:,z_,i] = zoffset
    # ------------------------------------------------- #
    # --- [3] bfield calculation                    --- #
    # ------------------------------------------------- #
    import nkUtilities.equiSpaceGrid3D as esg
    x1MinMaxNum       = [ -0.7,+0.7, 51 ]
    x2MinMaxNum       = [ -0.2,+1.2, 51 ]
    x3MinMaxNum       = [  0.0, 0.0,  1 ]
    bpos              = esg.equiSpaceGrid3D( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                             x3MinMaxNum=x3MinMaxNum, returnType="point" )
    nBpt              = bpos.shape[0]
    BField_t          = np.zeros( (nBpt,6) )
    BField_a          = np.zeros( (nBpt,6,nCoils) )
    for i in range( nCoils ):
        coil              = np.copy( coils[:,:,i] )
        BField_t[:,0:3  ] = np.copy( bpos )
        BField_a[  :,:,i] = bio.biotSavartLaw( BField=BField_t, coil=coil, I0=1.0 )
    
    # ------------------------------------------------- #
    # --- [4] config Settings & draw position       --- #
    # ------------------------------------------------- #
    cfs.configSettings( config=config, configType="plot1D_def" )
    config["plt_linewidth"]  = 0.2
    config["plt_xAutoRange"] = False
    config["plt_yAutoRange"] = False
    config["plt_xRange"]     = [-0.7,0.7]
    config["plt_yRange"]     = [-0.2,1.2]
    fig = pl1.plot1D( pngFile="coils_position.png", config=config )
    for i in range( nCoils ):
        fig.add__plot( xAxis=coils[:,0,i], yAxis=coils[:,1,i], linestyle="--", color=colors[i] )
    fig.set__axis()
    fig.save__figure()
    # ------------------------------------------------- #
    # --- [3] orbit Calculation & Drawing           --- #
    # ------------------------------------------------- #
    for i in range( nCoils ):
        cmt.cMapTri( xAxis=BField_a[:,0,i], yAxis=BField_a[:,1,i], cMap=BField_a[:,5,i], \
                     pngFile="coil_{0:02}.png".format( i+1 ) )
    

# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):
    trimCoilField()
