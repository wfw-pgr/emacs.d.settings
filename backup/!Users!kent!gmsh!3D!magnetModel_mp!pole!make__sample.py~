import os, sys
import subprocess
import numpy      as np


# ========================================================= #
# ===  make__sample profile for testing                 === #
# ========================================================= #
def make__sample():

    # ------------------------------------------------- #
    # --- [0] parameter preparation                 --- #
    # ------------------------------------------------- #
    lc     = 0.05
    radius = 1.00
    LI     = 101
    LJ     = 101
    zMin   = 0.050
    zMax   = 0.200
    
    # ------------------------------------------------- #
    # --- [1] generate sample grid Data             --- #
    # ------------------------------------------------- #
    sys.path.append( "generate__gridData" )
    import generate__gridData as ggd
    x1MinMaxNum = [  -radius, +radius,  LI ]
    x2MinMaxNum = [  -radius, +radius,  LJ ]
    x3MinMaxNum = [     -0.0,     0.0,   1 ]
    outFile     = "dat/gridData.dat"
    pngFile     = "png/gridData.png"
    ggd.generate__gridData( zMin=zMin, zMax=zMax, \
                            x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                            x3MinMaxNum=x3MinMaxNum, \
                            pngFile    =pngFile    , outFile    = outFile )
    
    # ------------------------------------------------- #
    # --- [2] generate 2D mesh                      --- #
    # ------------------------------------------------- #
    
    sys.path.append( "generate__semiCircleMesh" )
    import generate__semiCircleMesh as scm
    scm.generate__semiCircleMesh( lc=lc, radius=radius )

    cmd  = "ElmerGrid 14 2 dat/model.msh"
    subprocess.call( cmd.split() )

    cmd  = "mv dat/model/mesh.nodes dat/mesh.nodes"
    subprocess.call( cmd.split() )

    # ------------------------------------------------- #
    # --- [3] interpolation on mesh                 --- #
    # ------------------------------------------------- #
    
    sys.path.append( "interpOnMesh/pyt" )
    import interpOnMesh as iom
    meshFile = "dat/mesh.nodes"
    gridFile = "dat/gridData.dat"
    outFile  = "dat/sample.dat"
    pngFile  = "png/sample.png"
    ret      = iom.interpOnMesh( gridFile=gridFile, meshFile=meshFile )
    
    with open( outFile, "w" ) as f:
        names   = [ "x{0}".format(i+1) for i in range( ret.shape[1] ) ]
        f.write( "# " + " ".join( names ) + "\n" )
        f.write( "# " + " ".join( [ str(i) for i in range(ret.shape[1] ) ] ) + "\n" )
        np.savetxt( f, ret )

    import nkUtilities.cMapTri    as cmt
    import nkUtilities.LoadConfig as lcf
    config = lcf.LoadConfig()
    config["cmp_xAutoRange"] = False
    config["cmp_yAutoRange"] = False
    config["cmp_xRange"]     = [    0.0, +radius]
    config["cmp_yRange"]     = [-radius, +radius]
    
    cmt.cMapTri( xAxis=ret[:,0], yAxis=ret[:,1], cMap=ret[:,2], pngFile=pngFile, config=config )
        
    # ------------------------------------------------- #
    # --- [4] save in Elmer nodes format            --- #
    # ------------------------------------------------- #
    import nkMeshRoutines.save__elmerNodeFile as sen
    nodeFile = "dat/pole.nodes"
    sen.save__elmerNodeFile( nodes=ret, nodeFile=nodeFile )
    
    cmd  = "mv dat/model/mesh.nodes dat/model/mesh_org.nodes"
    subprocess.call( cmd.split() )
    cmd  = "cp dat/model/mesh.elements dat/pole.elements"
    subprocess.call( cmd.split() )
    cmd  = "cp dat/pole.nodes dat/model/mesh.nodes"
    subprocess.call( cmd.split() )
    cmd  = "ElmerGrid 2 4 dat/model -out pole.msh"
    subprocess.call( cmd.split() )

    # ------------------------------------------------- #
    # --- [5] notification                          --- #
    # ------------------------------------------------- #
    print( "[make__sample] output :: dat/pole.elements " )
    print( "[make__sample] output :: dat/pole.nodes " )

    
        
# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):
    make__sample()
