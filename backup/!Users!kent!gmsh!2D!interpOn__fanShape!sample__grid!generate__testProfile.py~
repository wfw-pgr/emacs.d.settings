import numpy                      as np
import nkUtitlities.equiSpaceGrid as esg

# ========================================================= #
# ===  generate test profile for instant checking       === #
# ========================================================= #
def generate__testprofile( dim=None, x1MinMaxNum=None, x2MinMaxNum=None, x3MinMaxNum=None, \
                           returnType="point", vMin=0.0, vMax=1.0 ):
    
    # ------------------------------------------------- #
    # --- [1] Arguments                             --- #
    # ------------------------------------------------- #
    if   ( x1MinMaxNum is None ):
        print( "[generate__testprofile] no (x1,x2,x3)MinMaxNum is specified " )
        print( "                        :: Default => dim = 2D, [ 0.0, 1.0, 11 ] " )
        dim         = 2
        x1MinMaxNum = [ 0.0, 1.0, 21 ]
        x2MinMaxNum = [ 0.0, 1.0, 21 ]
    elif ( x2MinMaxNum is None ):
        dim         = 1
    elif ( x3MinMaxNum is None ):
        dim         = 2
    else:
        dim         = 3
    
    coef = 0.5 / sigma
    
    # ------------------------------------------------- #
    # --- [2] 1D ver.                               --- #
    # ------------------------------------------------- #
    if ( dim == 1 ):
        print( "[generate__testprofile]  dim == 1D, (LI)    = ({0})"           .format( x1MinMaxNum[2]                                 ) )
        x1g          = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, returnType="tuple" )
        print( x1g.shape )
        profile      = np.exp( - coef * ( x1Axis )**2 )
    if ( mode == "2D" ):
        print( "[generate__testprofile]  dim == 2D, (LI,LJ) = ({0},{1})"       .format( x1MinMaxNum[2], x2MinMaxNum[2]                 ) )
        x1Axis       = np.linspace( x1MinMaxNum[0], x1MinMaxNum[1], x1MinMaxNum[2] )
        x2Axis       = np.linspace( x2MinMaxNum[0], x2MinMaxNum[1], x2MinMaxNum[2] )
        x1g,x2g      = np.meshgrid( x1Axis, x2Axis, indexing='ij' )
        profile      = np.exp( -coef * ( x1g**2 + x2g**2 ) )
    if ( mode == "3D" ):
        print( "[generate__testprofile]  dim == 3D, (LI,LJ,LK) = ({0},{1},{2})".format( x1MinMaxNum[2], x2MinMaxNum[2], x3MinMaxNum[2] ) )
        x1Axis       = np.linspace( x1MinMaxNum[0], x1MinMaxNum[1], x1MinMaxNum[2] )
        x2Axis       = np.linspace( x2MinMaxNum[0], x2MinMaxNum[1], x2MinMaxNum[2] )
        x3Axis       = np.linspace( x3MinMaxNum[0], x3MinMaxNum[1], x3MinMaxNum[2] )
        x1g,x2g,x3g  = np.meshgrid( x1Axis, x2Axis, x3Axis, indexing='ij' )
        profile      = np.exp( -coef * ( x1g**2 + x2g**2 + x3g**2 ) )
        
    # ------------------------------------------------- #
    # --- [5] Return Results (point)                --- #
    # ------------------------------------------------- #
    if ( returnType.lower() == "point" ):
        if ( mode == "1D" ):
            ret      = np.zeros( (profile.size,2) )
            ret[:,0] = x1Axis
            ret[:,1] = profile
        if ( mode == "2D" ):
            ret      = np.zeros( (profile.size,3) )
            ret[:,0] =     x1g.reshape( (-1,) )
            ret[:,1] =     x2g.reshape( (-1,) )
            ret[:,2] = profile.reshape( (-1,) )
        if ( mode == "3D" ):
            ret      = np.zeros( (profile.size,4) )
            ret[:,0] =     x1g.reshape( (-1,) )
            ret[:,1] =     x2g.reshape( (-1,) )
            ret[:,2] =     x3g.reshape( (-1,) )
            ret[:,3] = profile.reshape( (-1,) )

    # ------------------------------------------------- #
    # --- [6] Return Results (dictionary)           --- #
    # ------------------------------------------------- #            
    if ( returnType.lower() == "dictionary" ):
        ret = { "x1Axis":x1Axis, "x2Axis":x2Axis, "x3Axis":x3Axis, "profile":profile }

    # ------------------------------------------------- #
    # --- [7] Return Results (structured)           --- #
    # ------------------------------------------------- #
    if ( returnType.lower() == "structured" ):
        if ( mode == "1D" ): arrs = np.array( [ x1g,           profile ] )
        if ( mode == "2D" ): arrs = np.array( [ x1g, x2g,      profile ] )
        if ( mode == "3D" ): arrs = np.array( [ x1g, x2g, x3g, profile ] )
        ret  = np.concatenate( [ arr[...,np.newaxis] for arr in arrs ], axis=-1 )
    return( ret )

        
# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):
    Data    = generate__testprofile( x1MinMaxNum=[0.0,1.0,11] )
    print( Data )
