import os, sys, subprocess
import numpy         as np
import gmsh_api.gmsh as gmsh

# ========================================================= #
# ===  generate shim sample                             === #
# ========================================================= #

def generate__regenSample():

    # ------------------------------------------------- #
    # --- [1] Load parameter File                   --- #
    # ------------------------------------------------- #
    import nkUtilities.load__constants as lcn
    cnfFile    = "dat/regen.conf"
    params     = lcn.load__constants( inpFile=cnfFile )
    
    # ------------------------------------------------- #
    # --- [2] Load source Field File (.cst type)    --- #
    # ------------------------------------------------- #
    gridFile = "dat/grid.dat"
    import generate__shimShapeOnGrid as sog
    sog.generate__shimShapeOnGrid( r1     =params["r1"]     , r2 =params["r2"] , \
                                   z1     =params["z1"]     , z2 =params["z2"] , \
                                   th1    =params["th1"]    , th2=params["th2"], \
                                   LI     =params["grid_Lx"], LJ =params["grid_Ly"], \
                                   outFile=gridFile )
    
    # ------------------------------------------------- #
    # --- [3] generate 2D mesh to be interpolated   --- #
    # ------------------------------------------------- #
    import generate__interpMesh as gim
    gim.generate__interpMesh( lc =params["lc_geom"], r1 =params["r1"] , r2     =params["r2"], \
                              th1=params["th1"], th2=params["th2"], zoffset=params["zoffset"] )

    # ------------------------------------------------- #
    # --- [4] interp grid Data on Mesh              --- #
    # ------------------------------------------------- #
    import interpolate__gridData_onto_mesh as gom
    meshFile = "dat/regen.nodes"
    ret1     = gom.interpolate__gridData_onto_mesh( gridFile=gridFile, meshFile=meshFile )


    # ------------------------------------------------- #
    # --- [5] modify 2D node => 3D node             --- #
    # ------------------------------------------------- #

    cmd = "mv dat/regen.nodes dat/regen_2d.nodes"
    print( cmd )
    subprocess.call( cmd.split() )

    cmd = "cp -r msh/model msh/model_2d"
    print( cmd )
    subprocess.call( cmd.split() )

    cmd = "mv msh/model msh/model_3d"
    print( cmd )
    subprocess.call( cmd.split() )

    import nkMeshRoutines.save__elmerNodeFile as snf
    nodeFile = "dat/regen_3d.nodes"
    snf.save__elmerNodeFile( nodes=ret1, nodeFile=nodeFile )

    cmd = "cp dat/regen_3d.nodes msh/model_3d/mesh.nodes"
    print( cmd )
    subprocess.call( cmd.split() )
    
    cmd = "cp dat/regen_3d.nodes dat/regen.nodes"
    print( cmd )
    subprocess.call( cmd.split() )

    
    os.chdir( "msh" )
    cmd = "ElmerGrid 2 4 model_3d"
    print( cmd )
    subprocess.call( cmd.split() )
    os.chdir( "../" )

    
    # ------------------------------------------------- #
    # --- [6] generate regenerator shim Model       --- #
    # ------------------------------------------------- #

    import generate__regenShimParts as rsp
    nodeFile = "dat/regen.nodes"
    elemFile = "dat/regen.elements"
    rsp.generate__regenShimParts__execute( lc=params["lc_mesh"], height_tier2=params["z0"], \
                                           nodeFile=nodeFile   , elemFile    =elemFile      )
    
    print()
    print( "[generate__regenSample] output :: {0}".format( nodeFile ) )
    print( "[generate__regenSample]        :: {0}".format( elemFile ) )
    print( "[generate__regenSample]        :: {0}".format( "msh/example.msh" ) )
    print()
    
    
# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):
    generate__regenSample()
