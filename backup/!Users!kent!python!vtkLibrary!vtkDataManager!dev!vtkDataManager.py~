import os, sys, subprocess
import numpy               as np
import fieldDataManager    as fdm


# ========================================================= #
# ===  vtkDataManager                                   === #
# ========================================================= #
class vtkDataManager( fdm.fieldDataManager ):

    # ------------------------------------------------- #
    # --- constructor                               --- #
    # ------------------------------------------------- #

    def __init__( self, Data=None, tag=None, DataOrder=None, DataType=None, newFile=True, \
                  vtkFile   ="out.vti", vtkFileType="ImageData", DataFormat="ascii" ):

        # -- call fieldDataManager initialization -- #
        super().__init__( Data=Data, tag=tag, DataOrder=DataOrder, DataType=DataType )
        
        # -- vtk native variables                 -- #
        self.vtkFile     = vtkFile
        self.DataFormat  = DataFormat
        self.vtkFileType = vtkFileType
        self.fmt_double  = "%15.8e"

        # -- open vtkFile & write Header          -- #
        if ( newFile ):
            wMode = "w"
            self.openedFile = open( self.vtkFile, wMode )
            self.openedFile.write( '<?xml version="1.0" encoding="utf-8"?>\n' )
            self.openedFile.write( '<VTKFile type="{0}">\n'.format( self.vtkFileType ) )
        else:
            wMode = "a"
            self.openedFile = open( self.vtkFile, wMode )
            

    # ------------------------------------------------- #
    # --- add VTK's DataArray tag                   --- #
    # ------------------------------------------------- #
    
    def add__vtkDataArray( self, tag=None, DataFormat=None, DataSetKey=None ):

        # ------------------------------------------------- #
        # --- [1] Arguments Check                       --- #
        # ------------------------------------------------- #
        if ( tag        is None ): sys.exit( "[add_vtkDataArray -@vtkDataManager-] tag == ???" )
        if ( DataFormat is None ): DataFormat  = self.DataFormat
        
        # ------------------------------------------------- #
        # --- [2] add Data Array Tag                    --- #
        # ------------------------------------------------- #
        DAtag  = '<DataArray Name="{0}" type="{1}" NumberOfComponents="{2}" format="{3}">\n'\
            .format( tag, self.Data[tag].variableType, self.Data[tag].nComponents, DataFormat )
        self.openedFile.write( DAtag )
        
        # ------------------------------------------------- #
        # --- [3] add data array contents               --- #
        # ------------------------------------------------- #
        self.Data[tag].generate__pointData( DataSetKey=DataSetKey )
        np.savetxt( self.openedFile, self.Data[tag].pointData, fmt=self.fmt_double )
        
        # ------------------------------------------------- #
        # --- [4] close Data Array Tag                  --- #
        # ------------------------------------------------- #
        DAtag  = '</DataArray>\n'
        self.openedFile.write( DAtag )


    # ------------------------------------------------- #
    # --- add VTK's PointData tag                   --- #
    # ------------------------------------------------- #

    def add__vtkPointData( self, tag=None, DataFormat=None, Scl_or_Vec="Scalars", \
                           DataSetKey=None ):

        # ------------------------------------------------- #
        # --- [1] Arguments                             --- #
        # ------------------------------------------------- #
        if ( tag        is None ): sys.exit( "[add_vtkPointData -@vtkDataManager-] tag == ???" )
        if ( DataFormat is None ): DataFormat  = self.DataFormat
        if ( self.Data[tag].vectorData ):
            Scl_or_Vec = "Vectors"
        else:
            Scl_or_Vec = "Scalars"
        
        # ------------------------------------------------- #
        # --- [2] add vtk <PointData> tag               --- #
        # ------------------------------------------------- #
        PDtag  = '<PointData {0}="{1}">\n'.format( Scl_or_Vec, tag )
        PDtag_ = '</PointData>\n'
        self.openedFile.write( PDtag  )
        self.add__vtkDataArray( tag=tag, DataSetKey=DataSetKey )
        self.openedFile.write( PDtag_ )

        
    # ------------------------------------------------- #
    # --- add ImageData tag                         --- #
    # ------------------------------------------------- #

    def add__vtkImageData( self, tag=None, DataFormat=None, Extent=None, Spacing=None, \
                           Origin=None, Point_or_Cell="point" ):
        
        # ------------------------------------------------- #
        # --- [1] Arguments Check                       --- #
        # ------------------------------------------------- #
        if ( tag        is None ): sys.exit( "[add_vtkDataArray -@vtkDataManager-] tag == ???" )
        if ( DataFormat is None ): DataFormat = self.DataFormat

        # ------------------------------------------------- #
        # --- [2] asign origin & spacing                --- #
        # ------------------------------------------------- #
        # -- if Extent, Origin, Spacing                               -- #
        if ( Extent  is None ):
            Extent     = " ".join( [ "0 {0}".format( max(s-1,0) ) for s in list( self.Data[tag].shape  ) ] )
        if ( Origin  is None ):
            if ( self.Data[tag].origin is None ):
                self.Data[tag].origin = [0.0,0.0,0.0]
            Origin     = " ".join( [ str(Opt) for Opt in list( self.Data[tag].origin ) ] )
        if ( Spacing is None ):
            if ( self.Data[tag].dxdydz is None ):
                self.Data[tag].dxdydz = [1.0,1.0,1.0]
            Spacing    = " ".join( [ str(Spc) for Spc in list( self.Data[tag].dxdydz ) ] )
        # -- if Extent, Origin, Spacing is given as list / np.ndarray -- #
        if ( type(Extent ) in [ list, np.ndarray ] ):
            Extent     = " ".join( [ str(Shp) for Shp in list( Extent  ) ] )
        if ( type(Origin ) in [ list, np.ndarray ] ):
            Origin     = " ".join( [ str(Shp) for Shp in list( Origin  ) ] )
        if ( type(Spacing) in [ list, np.ndarray ] ):
            Spacing    = " ".join( [ str(Shp) for Shp in list( Spacing ) ] )
           
        # ------------------------------------------------- #
        # --- [3] add ImageData Tag                     --- #
        # ------------------------------------------------- #
        IDtag    = '<ImageData WholeExtent="{0}" Origin="{1}" Spacing="{2}">\n'\
            .format( Extent, Origin, Spacing )
        pieceTag =  '<Piece Extent="{0}">\n'.format( Extent )
        self.openedFile.write(    IDtag )
        self.openedFile.write( pieceTag )

        # ------------------------------------------------- #
        # --- [4] add  PointData or CellData            --- #
        # ------------------------------------------------- #
        if ( Point_or_Cell.lower() == "point" ):
            self.add__vtkPointData( tag=tag )
        if ( Point_or_Cell.lower() == "cell"  ):
            self.add__vtkCellData ( tag=tag )

        # ------------------------------------------------- #
        # --- [5] close ImageData Tag                   --- #
        # ------------------------------------------------- #
        self.openedFile.write( '</Piece>\n' )
        self.openedFile.write( '</ImageData>\n' )


        
    # ------------------------------------------------- #
    # --- add vtk structured Grid Data tag          --- #
    # ------------------------------------------------- #

    def add__vtkStructuredGridData( self, tag=None, DataFormat=None, Extent=None, \
                                    Point_or_Cell="point" ):
        
        # ------------------------------------------------- #
        # --- [1] Arguments Check                       --- #
        # ------------------------------------------------- #
        if ( tag        is None ): sys.exit( "[add_vtkDataArray -@vtkDataManager-] tag == ???" )
        if ( DataFormat is None ): DataFormat = self.DataFormat

        # ------------------------------------------------- #
        # --- [2] StructuredGrid & Piece Tag  Begin     --- #
        # ------------------------------------------------- #
        if ( Extent  is None ):
            Extent = " ".join( [ "0 {0}".format( max(s-1,0) ) \
                                 for s in list( self.Data[tag].shape  ) ] )
        self.openedFile.write( '<StructuredGrid WholeExtent="{0}">\n'.format( Extent ) )
        self.openedFile.write( '<Piece Extent="{0}">\n'              .format( Extent ) )

        # ------------------------------------------------- #
        # --- [3] PointData / Cell Data / Coordinates   --- #
        # ------------------------------------------------- #
        #  -- [3-1] PointData  --  #
        if ( Point_or_Cell.lower() == "point" ):
            self.add__vtkPointData( tag=tag, DataSetKey="fields" )
        #  -- [3-2] CellData   --  #
        if ( Point_or_Cell.lower() == "cell"  ):
            self.add__vtkCellData ( tag=tag, DataSetKey="fields" )
        #  -- [3-3] PointData  --  #
        self.add__vtkPointData( tag=tag, DataSetKey="coordinates" )

        # ------------------------------------------------- #
        # --- [4] close Structured Grid Tag             --- #
        # ------------------------------------------------- #
        self.openedFile.write( '</Piece>\n' )
        self.openedFile.write( '</StructuredGrid>\n' )
        
        
    # ------------------------------------------------- #
    # --- close vtkFile                             --- #
    # ------------------------------------------------- #
    def close__vtkFile( self ):

        # -- close VTKFile tag          -- #
        self.openedFile.write( "</VTKFile>\n" )
        # -- close File                 -- #
        self.openedFile.close()
        # -- indentation                -- #
        subprocess.call( ( "xmllint --format --encode utf-8 {0} -o {0}"\
                           .format( self.vtkFile ) ).split() )
        print( "[close__vtkFile -@vtkDataManager- ] VTK File closed :: {0}"\
               .format( self.vtkFile ) )
            

# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):

    import nkUtilities.equiSpaceGrid as esg
    x1MinMaxNum = [ 0.0, 1.0, 11 ]
    x2MinMaxNum = [ 0.0, 1.0, 11 ]
    x3MinMaxNum = [ 0.0, 1.0, 11 ]
    ret1        = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                     x3MinMaxNum=x3MinMaxNum, returnType = "point" )
    
    import nkUtilities.generate__testprofile as gtp
    x1MinMaxNum = [ 0.0, 1.0, 11 ]
    x2MinMaxNum = [ 0.0, 1.0, 11 ]
    x3MinMaxNum = [ 0.0, 1.0, 11 ]
    ret2        = gtp.generate__testprofile( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
    	                                     x3MinMaxNum=x3MinMaxNum, returnType = "structured" )
    ret2_       = np.sqrt( ret2[:,:,:,0]**2 + ret2[:,:,:,1]**2 + ret2[:,:,:,2]**2 )
    
    vtk         = vtkDataManager()
    
    vtk.add__fieldDataStruct( Data=ret2_, tag="image", DataType="image" )
    vtk.add__vtkImageData( tag="image" )
    
    vtk.add__fieldDataStruct( Data=ret1 , tag="point", DataType="point", shape=(11,11,11,3) )
    vtk.add__vtkStructuredGridData( tag="point" )
    
    vtk.print__fieldDataInfo()
    
    vtk.close__vtkFile()
