import os, sys, subprocess
import vtk
import numpy                  as np
import vtk.util.numpy_support as vtknp

# ========================================================= #
# ===  convert__pointData2vtu                           === #
# ========================================================= #

def convert__pointData2vtu( coordinates=None, pointData=None  ):

    # ------------------------------------------------- #
    # --- [1] Arguments Check                       --- #
    # ------------------------------------------------- #
    if ( coordinates is None ): sys.exit( "[convert__pointData2vtu] coordinates == ???" )
    if ( pointData   is None ): sys.exit( "[convert__pointData2vtu] pointData   == ???" )
    # ------------------------------------------------- #
    # --- [2] Preparation                           --- #
    # ------------------------------------------------- #
    x_, y_, z_   = 0, 1, 2
    pointData_   = vtknp.numpy_to_vtk(   pointData, deep=True )
    coordinates_ = vtknp.numpy_to_vtk( coordinates, deep=True )
    points       = vtk.vtkPoints()
    points.SetData( coordinates_ )
    # ------------------------------------------------- #
    # --- [3] generate vtk unstructuredGrdi Data    --- #
    # ------------------------------------------------- #
    ugrid = vtk.vtkUnstructuredGrid()
    ugrid.SetPoints( points )
    ugrid.GetPointData().AddArray( pointData_ )
    # ------------------------------------------------- #
    # --- [4] Delaunay triangulation                --- #
    # ------------------------------------------------- #
    delaunay = vtk.vtkDelaunay3D()
    delaunay.SetInputData( ugrid )
    delaunay.Update()
    # ------------------------------------------------- #
    # --- [5] save in vtu File                      --- #
    # ------------------------------------------------- #
    writer = vtk.vtkXMLUnstructuredGridWriter()
    writer.SetDataModeToAscii()
    writer.SetFileName( "test.vtu" )
    writer.SetInputData( delaunay.GetOutput() )
    writer.Write()
    

# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):

    import nkUtilities.generate__testprofile as gtp
    x1MinMaxNum = [ 0.0, 1.0, 21 ]
    x2MinMaxNum = [ 0.0, 1.0, 21 ]
    x3MinMaxNum = [ 0.0, 1.0, 21 ]
    Data        = gtp.generate__testprofile( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
    	                                     x3MinMaxNum=x3MinMaxNum, returnType = "point" )
    ref_radius  = 1.0
    radii       = np.sqrt( Data[:,0]**2 + Data[:,1]**2 + Data[:,2]**2 )
    index       = np.where( radii < ref_radius )
    coordinates = np.reshape( Data[index,0:3], (-1,3) )
    pointData   = np.reshape( Data[index,  3], (-1,1) )
    
    convert__pointData2vtu( coordinates=coordinates, pointData=pointData )
