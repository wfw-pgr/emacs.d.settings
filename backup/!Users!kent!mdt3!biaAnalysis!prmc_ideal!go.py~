import os, sys, subprocess
import numpy               as np

# ------------------------------------------------- #
# --- [1] load config                           --- #
# ------------------------------------------------- #

import nkUtilities.load__constants as lcn

print()
print( "------- [job Dir] -------" )
print()

import nkMDTRoutines.get__jobinfo as gji
info    = gji.get__jobinfo()
const   = info["config"]

# ------------------------------------------------- #
# --- [2] generate coordinates                  --- #
# ------------------------------------------------- #

#  -- [2-1] make mesh in a circle / half-circle --  #

sys.path.append( "pyt" )

# -- include ideal fringe or not -- #
if ( const["ideal.fringe_sw"] ):
    radius = const["bfield.rhoMax"] + const["ideal.rLinear"]
else:
    radius = const["bfield.rhoMax"]

# -- one-side / both-side -- #
if   ( const["general.side"] in ["+","-"] ):
    import pyt.generate__semiCircleMesh as scm
    scm.generate__semiCircleMesh( radius=radius, side=const["general.side"], \
                                  lc1=const["ideal.meshsize_bot"], lc2=const["ideal.meshsize_mid"], \
                                  lc3=const["ideal.meshsize_top"] )
elif ( const["general.side"] in ["+-","-+"] ):
    import pyt.generate__fullCircleMesh as fcm
    fcm.generate__fullCircleMesh( radius=radius, \
                                  lc1=const["ideal.meshsize_mid"], lc2=const["ideal.meshsize_top"], \
                                  lc3=const["ideal.meshsize_mid"], lc4=const["ideal.meshsize_bot"] )
else:
    print( "[pole_ideal/go.py] unknown side :: {0} ".format( const["general.side"] ) )


#  -- [2-2] elmergrid .msh => .nodes            --  #

os.chdir( "msh/" )
cmd = "ElmerGrid 14 2 model.msh"
print( cmd )
subprocess.call( cmd.split() )
os.chdir( "../" )

cmd = "cp msh/model/mesh.nodes dat/"
print( cmd )
subprocess.call( cmd.split() )


#  -- [2-3] load nodes data                     --  #

nodeFile = "dat/mesh.nodes"
with open( nodeFile, "r" ) as f:
    Data = np.loadtxt( f )

wData = np.zeros( (Data.shape[0],3) )
wData = np.copy( Data[:,2:] )

import nkUtilities.save__pointFile as spf
outFile   = "dat/bia_coordinates_mcoord.dat"
spf.save__pointFile( outFile=outFile, Data=wData )

wData[:,1] = wData[:,1] + const["bfield.yoffset"]
outFile   = "dat/bia_coordinates_acoord.dat"
spf.save__pointFile( outFile=outFile, Data=wData )


# ------------------------------------------------- #
# --- [3] vemic Field calculation               --- #
# ------------------------------------------------- #

mode    = const["general.vemicFieldType"]
yoffset = const["bfield.yoffset"]
xp      = Data[:,2]
yp      = Data[:,3] + yoffset
print( np.min(yp), np.max(yp) )

if ( const["ideal.fringe_sw"] ):
    # -- w/  ideal fringe -- #
    import ideal_fringe_field as iff
    ret     = iff.ideal_fringe_field( xp=xp, yp=yp, params=const )
else:
    # -- w/o ideal fringe -- #
    import phys.vemicBField as vbf
    ret     = vbf.vemicBField( xp=xp, yp=yp, mode=mode, add__bumpField=const["general.add_bump"] )
    

# ------------------------------------------------- #
# --- [4] display fields                        --- #
# ------------------------------------------------- #
    
wData      = np.zeros( (Data.shape[0],6) )
wData[:,0] = np.copy( xp       )
wData[:,1] = np.copy( yp       )
wData[:,5] = np.copy( ret[:,2] )

outFile    = "dat/pole_ideal_acoord.dat"
spf.save__pointFile( outFile=outFile, Data=wData )

import nkUtilities.load__config as lcf
config  = lcf.load__config()
config["cmp_pointSW"]     = True
config["cmp_pointColor"]  = "grey"
config["cmp_pointMarker"] = "o"
config["cmp_pointSize"]   = 0.2

import nkUtilities.cMapTri as cmt
pngFile = "png/pole_ideal_acoord.png"
cmt.cMapTri( xAxis=wData[:,0], yAxis=wData[:,1], cMap=wData[:,5], pngFile=pngFile, config=config )

outFile    = "dat/pole_ideal_mcoord.dat"
wData[:,1] = wData[:,1] - const["bfield.yoffset"]
spf.save__pointFile( outFile=outFile, Data=wData )

import nkUtilities.cMapTri as cmt
pngFile = "png/pole_ideal_mcoord.png"
cmt.cMapTri( xAxis=wData[:,0], yAxis=wData[:,1], cMap=wData[:,5], pngFile=pngFile, config=config )

print()
print( "----------------------------------------------------------------------" )
print( "[go.py] size of the pole_ideal field :: {0} ".format( wData.shape[0] ) )
print( "----------------------------------------------------------------------" )
print()


# ------------------------------------------------- #
# --- [5] EMSolution post-process coordinate    --- #
# ------------------------------------------------- #

#  -- [5-1] make bia_coordinates_mcoord.dat     --  #
meshFile = "dat/bia_coordinates_mcoord.dat"
with open( meshFile, "r" ) as f:
    Data = np.loadtxt( f )

#  -- [5-2] make ems_pst.coord                  --  #
emspFile = "dat/ems_pst.coord"
wData      = np.copy( Data[:,:] )
with open( emspFile, "w" ) as f:
    np.savetxt( f, wData, fmt="%15.8e" )
    print( "[generate__shimmingTarget] output :: {0} ".format( emspFile ) )

#  -- [5-3] display file copy                   --  #
print()
print( "------- [FileCopy] -------" )
print()
cmd1     = "cp png/pole_ideal_mcoord.png {0}".format( pngDir )
cmd2     = "cp png/pole_ideal_acoord.png {0}".format( pngDir )
cmd3     = "cp dat/pole_ideal_mcoord.dat {0}".format( datDir )
cmd4     = "cp dat/pole_ideal_acoord.dat {0}".format( datDir )
cmd5     = "cp dat/ems_pst.coord {0}"        .format( datDir )
print( cmd1 )
print( cmd2 )
print( cmd3 )
print( cmd4 )
print( cmd5 )
subprocess.call( cmd1.split() )
subprocess.call( cmd2.split() )
subprocess.call( cmd3.split() )
subprocess.call( cmd4.split() )
subprocess.call( cmd5.split() )
print()
print( "------- [FileCopy] -------" )
print()
