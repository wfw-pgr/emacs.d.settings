import numpy as np
import os, sys, math
import gmsh

# ========================================================= #
# ===  generate__compound surface                       === #
# ========================================================= #
def generate__compoundSurface( inpFile=None, lc=None ):

    x_, y_, z_ = 0, 1, 2
    
    # ------------------------------------------------- #
    # --- [1] Arguments                             --- #
    # ------------------------------------------------- #
    if ( inpFile is None ): sys.exit( "[generate__compoundSurface] inpFile == ???" )
    if ( lc      is None ): lc = 0.0
    
    # ------------------------------------------------- #
    # --- [2] load file                             --- #
    # ------------------------------------------------- #
    import nkUtilities.load__pointFile as lpf
    points = lpf.load__pointFile( inpFile=inpFile, returnType="point" )

    # ------------------------------------------------- #
    # --- [3] mapping loaded points                 --- #
    # ------------------------------------------------- #
    initNum = 1
    ptsarr  = []
    pts     = {}
    for ik,pt in enumerate( points ):
        num         = gmsh.model.occ.addPoint( pt[x_], pt[y_], pt[z_], meshSize=lc )
        ptsarr.append( [ pt[x_], pt[y_], pt[z_], lc, num ] )
    for ik,pt in enumerate( ptsarr ):
        key         = "pt{0:08}".format( ik )
        pts[key]    = pt
    ptsarr  = np.array( ptsarr )
        
    # ------------------------------------------------- #
    # --- [4] Delaunay triangulation                --- #
    # ------------------------------------------------- #
    xy_projection = np.copy( points[:,0:2] )
    import scipy.spatial as spa
    delaunay = spa.Delaunay( xy_projection )
    
    # ------------------------------------------------- #
    # --- [5] triangulation                         --- #
    # ------------------------------------------------- #
    combination = [ (0,1), (0,2), (1,2) ]
    surfarr     = []
    line        = {}
    keys        = []
    for ik,tri in enumerate( delaunay.simplices ):
        lnum = []
        for ic,cmb in enumerate( combination ):
            tag1, tag2 = int( ptsarr[ tri[ cmb[0] ], 4 ] ), int( ptsarr[ tri[ cmb[1] ], 4 ] )
            key        = "{0}_{1}".format( min( tag1,tag2 ), max( tag1, tag2 ) )
            if ( not( key in keys ) ):
                line[key] = gmsh.model.occ.addLine( tag1, tag2 )
                keys.append(      key  )
            lnum.append( line[key] )
        LineLoop      = [ lnum[0], lnum[1], lnum[2] ]
        LineLoopGroup = gmsh.model.occ.addCurveLoop( LineLoop )
        snum          = gmsh.model.occ.addPlaneSurface( [LineLoopGroup] )
        surfarr.append( snum )

    # ------------------------------------------------- #
    # --- [6] compound settings                     --- #
    # ------------------------------------------------- #
    gmsh.model.occ.synchronize()
    gmsh.model.occ.removeAllDuplicates()
    gmsh.model.occ.synchronize()
    gmsh.model.mesh.generate(2)

    # gmsh.model.mesh.setCompound( 2, surfarr )
    angle           = 40.0  * math.pi/180.0
    includeBoundary = False
    forceParametrizablePatches = False
    curveAngle      = 180.0 * math.pi/180.0
    gmsh.model.mesh.classifySurfaces( angle, includeBoundary, forceParametrizablePatches, \
                                      curveAngle )
    gmsh.model.mesh.createGeometry()
    gmsh.model.mesh.createTopology()
    gmsh.model.occ.synchronize()
    gmsh.model.occ.removeAllDuplicates()
    gmsh.model.occ.synchronize()

    

    
# ========================================================= #
# ===   実行部                                          === #
# ========================================================= #

if ( __name__=="__main__" ):

    gmsh.initialize()
    gmsh.option.setNumber( "General.Terminal", 1 )
    gmsh.option.setNumber( "Mesh.Algorithm"  , 6 )
    gmsh.option.setNumber( "Mesh.Algorithm3D", 10 )
    gmsh.model.add( "model" )

    inpFile = "dat/sample.dat"
    generate__compoundSurface( inpFile=inpFile )
    
    gmsh.model.occ.synchronize()
    gmsh.model.occ.removeAllDuplicates()
    gmsh.model.occ.synchronize()

    # gmsh.option.setNumber( "Mesh.CharacteristicLengthMin", 0.05 )
    # gmsh.option.setNumber( "Mesh.CharacteristicLengthMax", 0.10 )
    gmsh.model.mesh.generate(2)
    gmsh.write( "msh/model.msh" )
    gmsh.write( "msh/model.geo_unrolled" )
    gmsh.finalize()

