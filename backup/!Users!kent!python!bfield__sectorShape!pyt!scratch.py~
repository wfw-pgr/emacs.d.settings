import numpy as np

# ========================================================= #
# ===  test calculation                                 === #
# ========================================================= #

def scratch():

    # ------------------------------------------------- #
    # --- [1] make coordinate                       --- #
    # ------------------------------------------------- #
    import nkUtilities.equiSpaceGrid as esg
    x1MinMaxNum = [              0.7,              0.8, 11 ]
    x2MinMaxNum = [ 10.0/180.0*np.pi, 30.0/180.0*np.pi, 11 ]
    x3MinMaxNum = [              0.1,              0.1,  1 ]
    coord       = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                     x3MinMaxNum=x3MinMaxNum, returnType = "point" )

    # ------------------------------------------------- #
    # --- [2] functions                             --- #
    # ------------------------------------------------- #

    def zpos_coil( radii, theta ):
        zpos = np.zeros( (radii.shape[0],) )
        zpos = zpos + 0.1
        return( zpos )
        
    def Kleeven2016( rp, th, r0=0.0, th0=0.0, zp=1.0, alpha=0.0, J0=1.0 ):
        insqrt = np.sqrt( ( rp - r0*np.cos( th - th0 ) )**2 + r0**2*( np.sin( th-th0 ) )**2 + zp**2 )
        ret    = J0 / ( 4.0 * np.pi ) * zp * rp * np.cos( alpha ) / insqrt**3
        return( ret )

    # ------------------------------------------------- #
    # --- [3] parameters of function                --- #
    # ------------------------------------------------- #
    r0    = coord[:,0]
    th0   = coord[:,1]
    zp    = coord[:,2]
    J0    = 1.0
    alpha = 0.0

    # ------------------------------------------------- #
    # --- [4] integration                           --- #
    # ------------------------------------------------- #
    x1Range = [ 0.7, 0.8 ]
    x2Range = [ 10.0/180.0*np.pi, 30.0/180.0*np.pi ]
    import nkBasicAlgs.integrate__GaussLegendre as igl
    for ik in list( range( coord.shape[0] ) ):
        params  = { "r0":coord[ik,0], "th0":coord[ik,1], "zp":coord[ik,2], \
                    "J0":J0, "alpha":alpha }
        integ   = igl.integrate__GaussLegendre( function=Kleeven2016, params=params, \
                                                x1Range=x1Range, x2Range=x2Range )
    print( integ )
    return( integ )


# ========================================================= #
# ===   Execution of Pragram                            === #
# ========================================================= #

if ( __name__=="__main__" ):
    scratch()
