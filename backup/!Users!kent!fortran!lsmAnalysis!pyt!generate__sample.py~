import numpy as np


# ========================================================= #
# ===  generate bfield sample                           === #
# ========================================================= #

def generate__sampleField():

    x_, y_, z_ = 0, 1, 2
    
    # ------------------------------------------------- #
    # --- [1]  generate bfield                      --- #
    # ------------------------------------------------- #
    import nkUtilities.equiSpaceGrid as esg
    x1MinMaxNum = [ 0.0, 1.0, 21 ]
    x2MinMaxNum = [ 0.0, 1.0, 21 ]
    x3MinMaxNum = [ 0.0, 0.0,  1 ]
    coord       = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                     x3MinMaxNum=x3MinMaxNum, returnType = "point" )
    radii       = np.sqrt( coord[:,x_]**2 + coord[:,y_]**2 )
    index       = np.where( radii < 1.0 )
    coord       = coord[index]
    bi, bb      = np.ones( coord.shape[0] ), np.ones( coord.shape[0] )
    Data        = np.concatenate( [coord,bi[:,None],bb[:,None]], axis=1 )

    # ------------------------------------------------- #
    # --- [2] save in a file                        --- #
    # ------------------------------------------------- #
    import nkUtilities.save__pointFile as spf
    outFile   = "dat/bfield_input.dat"
    spf.save__pointFile( outFile=outFile, Data=Data )
    return()



# ========================================================= #
# ===  generate sample shape                            === #
# ========================================================= #

def generate__sampleShape():

    x_, y_, z_  = 0, 1, 2
    zMin,zMax   = 0.020, 0.180
    radius      = 1.050
    
    # ------------------------------------------------- #
    # --- [1]  generate mshape                      --- #
    # ------------------------------------------------- #
    import nkUtilities.equiSpaceGrid as esg
    x1MinMaxNum = [ 0.0, 1.1, 21 ]
    x2MinMaxNum = [ 0.0, 1.1, 21 ]
    x3MinMaxNum = [ 0.0, 0.0,  1 ]
    coord       = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                     x3MinMaxNum=x3MinMaxNum, returnType = "structured" )
    shape       = coord.shape[1:]
    coord       = np.reshape( coord, (-1,3) )
    radii       = np.sqrt( coord[:,x_]**2 + coord[:,y_]**2 )
    coord[:,z_] = ( zMax - zMin ) * np.exp( - ( radii/radius )**2 ) + zMin
    coord       = np.reshape( coord, shape )
    
    # ------------------------------------------------- #
    # --- [2] save in a file                        --- #
    # ------------------------------------------------- #
    import nkUtilities.save__pointFile as spf
    outFile   = "dat/mshape_svd.dat"
    spf.save__pointFile( outFile=outFile, Data=coord )
    return()



# ========================================================= #
# ===  generate sample weight                           === #
# ========================================================= #

def generate__sampleWeight():

    x_, y_, z_  = 0, 1, 2
    
    
    # ------------------------------------------------- #
    # --- [1] load mshape file                      --- #
    # ------------------------------------------------- #
    import nkUtilities.load__pointFile as lpf
    inpFile = "dat/bfield_input.dat"
    coord   = lpf.load__pointFile( inpFile=inpFile, returnType="point" )

    # ------------------------------------------------- #
    # --- [2] concatenate color & weight info.      --- #
    # ------------------------------------------------- #
    color   = np.ones( ( coord.shape[0],1) )
    weight  = np.ones( ( coord.shape[0],1) )
    Data    = np.concatenate( [coord[:,0:3],color,weight], axis=1 )
    
    # ------------------------------------------------- #
    # --- [3] save in a file                        --- #
    # ------------------------------------------------- #
    import nkUtilities.save__pointFile as spf
    outFile   = "dat/weights.dat"
    spf.save__pointFile( outFile=outFile, Data=Data )
    return()

    

# ========================================================= #
# ===   Execution of Pragram                            === #
# ========================================================= #
if ( __name__=="__main__" ):
    generate__sampleField ()
    generate__sampleShape ()
    generate__sampleWeight()
