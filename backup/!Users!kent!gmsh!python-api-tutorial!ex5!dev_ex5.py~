import numpy as np
import sys
import gmsh

sys.path.append( "../../pygmshLibrary" )
import generateXYplaneArcBox as arc


# ------------------------------------------------- #
# --- [1] initialization of the gmsh            --- #
# ------------------------------------------------- #
gmsh.initialize()
gmsh.option.setNumber( "General.Terminal", 1 )
gmsh.option.setNumber( "Mesh.Algorithm"  , 2 )
gmsh.model.add( "model" )

# ------------------------------------------------- #
# --- [2] magnet pole Volume Definition         --- #
# ------------------------------------------------- #
lc     = 50.0
rPole  = 670.0
rGap   = 200.0
rThick = 200.0
rYoke  = rPole + rGap + rThick
zGap   = 200.0
zPole  = 300.0
zThick = 200.0
zYoke  = zGap + zPole + zThick
zBegin = zGap + zPole
pole   = arc.generateXYplaneArcBox( r1=0.0, r2=rPole, zWidth=zPole , zoffset=zGap  , lc=lc )
yoke1  = arc.generateXYplaneArcBox( r1=0.0, r2=rYoke, zWidth=zThick, zoffset=zBegin, lc=lc )
# intersect = gmsh.model.occ.intersect( [(3,1)], [(3,2)], removeObject=False, removeTool=False)[0]
# gmsh.model.occ.synchronize()
# if len(intersect):
#     # if there is an intersection, do what you want to do.
#     gmsh.model.occ.remove(intersect, True)  # remove created intersection objects
#     gmsh.model.occ.synchronize()
# gmsh.model.geo.removeAllDuplicates()
gmsh.model.occ.removeAllDuplicates()
# gmsh.model.occ.getCenterOfMass(3,1)
# gmsh.model.geo.remove( [(3,1)], recursive=True)

# gmsh.model.occ.healShapes( dimTags=[(3,1),(3,2)], tolerance=1e-5, fixDegenerated=True, fixSmallEdges=True, fixSmallFaces=True, sewFaces=True, makeSolids=True)
# gmsh.model.occ.fragment( [(3,1),(3,2)], [], removeObject=False, removeTool=False )

# ------------------------------------------------- #
# --- [2] post process                          --- #
# ------------------------------------------------- #
# gmsh.model.geo.synchronize()
gmsh.model.occ.synchronize()
gmsh.model.mesh.generate(3)
# gmsh.write( "ex5.geo_unrolled" )
gmsh.write( "ex5.msh" )
gmsh.finalize()

