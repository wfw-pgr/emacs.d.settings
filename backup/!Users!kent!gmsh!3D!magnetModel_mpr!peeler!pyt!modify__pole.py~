import subprocess, sys, os
import numpy as np

# ========================================================= #
# ===  modify_pole                                      === #
# ========================================================= #

def modify__pole():

    i_,f_,x_,y_,z_ = 0, 1, 2, 3, 4

    confFile = "../dat/magnet.conf"
    poleFile = "dat/pole_pelSide.nodes"
    peelFile = "dat/peeler.nodes"

    # ------------------------------------------------- #
    # --- [1] Load config & node Files              --- #
    # ------------------------------------------------- #
    
    import nkUtilities.load__constants as lcn
    const    = lcn.load__constants( inpFile=confFile )
    with open( poleFile, "r" ) as f:
        pole = np.loadtxt( f )
    with open( peelFile, "r" ) as f:
        peel = np.loadtxt( f )

    # ------------------------------------------------- #
    # --- [2] filterate mesh to be modify           --- #
    # ------------------------------------------------- #
    radii = np.sqrt( pole[:,x_]**2 + pole[:,y_]**2 )
    angle = np.arctan2( pole[:,y_], pole[:,x_] ) * 180.0 / np.pi
    angle[ np.where( angle < 0.0 ) ] += 360.0
    index = np.where(   ( radii > const["peeler_r1"]  ) & ( radii < const["peeler_r2"]  ) & \
                        ( angle > const["peeler_th1"] ) & ( angle < const["peeler_th2"] ) )

    # ------------------------------------------------- #
    # --- [3] interpolation                         --- #
    # ------------------------------------------------- #
    #  -- [3-1] unstructured => unstructured        --  #
    modif = np.copy( ( pole[index] )[:,2:] )
    peel  = np.copy( peel[:,2:] )
    import nkInterpolator.barycentric__interpolator as bci
    ret   = bci.barycentric__interpolator( nodes=peel, points=modif )

    #  -- [3-2] substitution ( primitive, though )  --  #
    for ik,il in enumerate( index[0] ):
        pole[il,z_] = ret[ik,2]

    # ------------------------------------------------- #
    # --- [4] save Mesh as Elmer node File          --- #
    # ------------------------------------------------- #
    import nkMeshRoutines.save__elmerNodeFile as sen
    modiFile = "dat/pole_modified.nodes"
    sen.save__elmerNodeFile( nodes=pole, nodeFile=modiFile )

    # ------------------------------------------------- #
    # --- [5] convert into vtp File                 --- #
    # ------------------------------------------------- #
    
    with open( modiFile, "r" ) as f:
        rData  = np.loadtxt( f )
    Data       = np.zeros( (rData.shape[0],4) )
    Data[:,:3] = rData[:,2:]
    Data[:, 3] = rData[:, 4]

    import nkVTKRoutines.vtkDataConverter as vtk
    vtk.vtkDataConverter( Data=Data, tag="sample", vtkFile="png/out.vtp", DataType="point" )

    cmd = "cp {0} ../dat/".format( modiFile )
    print()
    print( cmd )
    print()
    subprocess.call( cmd.split() )



# ========================================================= #
# ===   実行部                                          === #
# ========================================================= #
if ( __name__=="__main__" ):
    modify__pole()
