import vtk
from vtk.util.numpy_support import (numpy_to_vtk, numpy_to_vtkIdTypeArray,
                                    vtk_to_numpy)
import numpy as np

ID_TYPE = np.int
if vtk.VTK_ID_TYPE == 12:
    ID_TYPE = np.int


offset = np.array([0, 9], np.int)
cells = np.array([8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15])
cell_type = np.array([vtk.VTK_HEXAHEDRON, vtk.VTK_HEXAHEDRON], np.int)

cell1 = np.array([[0, 0, 0],
                  [1, 0, 0],
                  [1, 1, 0],
                  [0, 1, 0],
                  [0, 0, 1],
                  [1, 0, 1],
                  [1, 1, 1],
                  [0, 1, 1]])

cell2 = np.array([[0, 0, 2],
                  [1, 0, 2],
                  [1, 1, 2],
                  [0, 1, 2],
                  [0, 0, 3],
                  [1, 0, 3],
                  [1, 1, 3],
                  [0, 1, 3]])

points = np.vstack((cell1, cell2)).astype(np.int)

if offset.dtype != ID_TYPE:
    offset = offset.astype(ID_TYPE)

if cells.dtype != ID_TYPE:
    cells = cells.astype(ID_TYPE)

if not cells.flags['C_CONTIGUOUS']:
    cells = np.ascontiguousarray(cells)

if cells.ndim != 1:
    cells = cells.ravel()

if cell_type.dtype != np.uint8:
    cell_type = cell_type.astype(np.uint8)

# Get number of cells
ncells = cell_type.size

# Convert to vtk arrays
cell_type = numpy_to_vtk(cell_type)
offset = numpy_to_vtkIdTypeArray(offset)

vtkcells = vtk.vtkCellArray()
vtkcells.SetCells(ncells, numpy_to_vtkIdTypeArray(cells.ravel()))

# Convert points to vtkPoints object
vtkpts = vtk.vtkPoints()
vtkpts.SetData(numpy_to_vtk(points))

# Create unstructured grid
grid = vtk.vtkUnstructuredGrid()
grid.SetPoints(vtkpts)
grid.SetCells(cell_type, offset, vtkcells)


# And save the grid
writer = vtk.vtkXMLUnstructuredGridWriter()
writer.SetDataModeToBinary()
writer.SetFileName('test.vtu')
writer.SetInputData(grid)
writer.Write()
