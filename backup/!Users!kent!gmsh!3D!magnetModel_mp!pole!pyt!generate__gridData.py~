import os, sys
import numpy as np

import nkUtilities.generate__sampleProfile as gsp

# ========================================================= #
# ===  generate grided Data                             === #
# ========================================================= #

def generate__gridData( zMin=0.100, zMax=0.200, \
                        x1MinMaxNum=None, x2MinMaxNum=None, x3MinMaxNum=None, \
                        outFile    =None, pngFile    =None  ):
    if ( x1MinMaxNum is None ): x1MinMaxNum = [  -1.0, 1.0, 51 ]
    if ( x2MinMaxNum is None ): x2MinMaxNum = [  -1.0, 1.0, 51 ]
    if ( x3MinMaxNum is None ): x3MinMaxNum = [  -0.0, 0.0,  1 ]
    if ( outFile     is None ): outFile     = "dat/gridData.dat"
    if ( pngFile     is None ): pngFile     = "png/gridData.png"


    import nkUtilities.equiSpaceGrid3D as esg
    ret         = esg.equiSpaceGrid3D( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
    	      			       x3MinMaxNum=x3MinMaxNum, returnType = "point" )
    radii    = np.sqrt( ret[:,0]**2 + ret[:,1]**2 )
    radius   = np.max( radii )
    rhat     = 0.5 * np.pi * ( radii / radius )
    ret[:,2] = zMin + ( zMax-zMin )*( np.cos( rhat )**2 )

    import nkUtilities.save__pointFile as spf
    shape = [ x3MinMaxNum[2], x2MinMaxNum[2], x1MinMaxNum[2], 3 ]
    spf.save__pointFile( outFile=outFile, Data=ret, shape=shape )
    
    import nkUtilities.cMapTri as cmt
    cmt.cMapTri( xAxis=ret[:,0], yAxis=ret[:,1], cMap=ret[:,2], pngFile=pngFile )

    
# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):
    generate__gridData()
