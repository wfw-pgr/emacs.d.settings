import numpy                    as np
import nkUtilities.plot1D       as pl1
import nkUtilities.load__config as lcf


# ========================================================= #
# ===  display mesh Quality                             === #
# ========================================================= #

def display__meshQuality( indicator="rho(gmsh)", inpFile="dat/mesh_quality.dat", \
                          mshFile=None ):

    # ------------------------------------------------- #
    # --- [1] Arguments                             --- #
    # ------------------------------------------------- #
    if ( mshFile is not None ):
        import nkMeshRoutines.assess__meshQuality as amq
        amq.assess__meshQuality( inpFile=mshFile )
        inpFile = "dat/mesh_quality.dat"
        
    # ------------------------------------------------- #
    # --- [2] load qualities                        --- #
    # ------------------------------------------------- #
    import nkUtilities.load__pointFile as lpf
    Data    = lpf.load__pointFile( inpFile=inpFile, returnType="point" )

    # ------------------------------------------------- #
    # --- [3] gmsh rho                              --- #
    # ------------------------------------------------- #
    title_table    = { "volume":"Volume", "area":"Face Area", "rho":r"$\rho$", \
                       "gamma":r"$\gamma$", "aspect_ratio":"Aspect Ratio", \
                       "rho(gmsh)":r"$\rho$", "eta(gmsh)":r"$\eta$", "gamma(gmsh)":r"$\gamma$" }
    evaluate_table = { "elementNum":0, "volume":1, "area":2, "rho":3, "gamma":4, \
                       "aspect_ratio":5, "rho(gmsh)":6, "eta(gmsh)":7, "gamma(gmsh)":8 }
    idx   = evaluate_table[indicator]
    Data  = np.ravel( Data[:,idx] )

    # ------------------------------------------------- #
    # --- [4] make histogram                        --- #
    # ------------------------------------------------- #
    ret,bins = np.histogram( Data, bins=50, range=(0.,1.) )
    ret      = ret / np.sum( ret )
    bins     = ( 0.5 * ( bins + np.roll( bins, +1 ) ) )[1:]
    xTitle   = title_table[indicator]
    
    pngFile          = "png/mesh_quality.png"
    config           = lcf.load__config()
    config["xTitle"] = xTitle
    config["yTitle"] = "Normalized Frequency"
    
    fig    = pl1.plot1D( config=config, pngFile=pngFile )
    fig.add__bar( xAxis=bins, yAxis=ret )
    fig.set__axis()
    fig.save__figure()



# ========================================================= #
# ===   実行部                                          === #
# ========================================================= #

if ( __name__=="__main__" ):
    display__meshQuality()
