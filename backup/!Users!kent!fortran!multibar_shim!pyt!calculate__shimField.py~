import numpy            as np
import numpy.ctypeslib  as Flib
import ctypes, sys
import os.path

# ================================================================ #
# ===   calculate__shimField                                   === #
# ================================================================ #
def calculate__shimField( bfield=None, mvec=None, r1=None, r2=None, p1=None, p2=None, \
                          z1=None, z2=None, LI=None, LJ=None, LK=None ):
    # ---------------------------------------- #
    # --- [1]   引数チェック               --- #
    # ---------------------------------------- #
    if ( bfield is None ): sys.exit( "[calculate__shimField] bfield ???" )
    if ( mvec   is None ): sys.exit( "[calculate__shimField] mvec   ???" )
    if ( r1     is None ): sys.exit( "[calculate__shimField] r1     ???" )
    if ( r2     is None ): sys.exit( "[calculate__shimField] r2     ???" )
    if ( p1     is None ): sys.exit( "[calculate__shimField] p1     ???" )
    if ( p2     is None ): sys.exit( "[calculate__shimField] p2     ???" )
    if ( z1     is None ): sys.exit( "[calculate__shimField] z1     ???" )
    if ( z2     is None ): sys.exit( "[calculate__shimField] z2     ???" )
    if ( LI     is None ): sys.exit( "[calculate__shimField] LI     ???" )
    if ( LJ     is None ): sys.exit( "[calculate__shimField] LJ     ???" )
    if ( LK     is None ): sys.exit( "[calculate__shimField] LK     ???" )

    # ---------------------------------------- #
    # --- [2]   引数準備                   --- #
    # ---------------------------------------- #
    #  -- [2-1] 使用する引数を準備         --  #
    nB       = bfield.shape[0]
    #  -- [2-2] Fortranサイズへ変換        --  #
    bfield_  =     np.array( bfield, dtype=np.float64  )
    mvec_    =     np.array( mvec  , dtype=np.float64  )
    r1_      =     np.array( r1    , dtype=np.float64  )
    r2_      =     np.array( r2    , dtype=np.float64  )
    p1_      =     np.array( p1    , dtype=np.float64  )
    p2_      =     np.array( p2    , dtype=np.float64  )
    z1_      =     np.array( z1    , dtype=np.float64  )
    z2_      =     np.array( z2    , dtype=np.float64  )
    LI_      = ctypes.byref(   ctypes.c_int64( LI   )  )
    LJ_      = ctypes.byref(   ctypes.c_int64( LJ   )  )
    LK_      = ctypes.byref(   ctypes.c_int64( LK   )  )
    nB_      = ctypes.byref(   ctypes.c_int64( nB   )  )

    # ---------------------------------------- #
    # --- [3]   ライブラリをロード         --- #
    # ---------------------------------------- #
    #  -- [3-1] ライブラリを定義           --  #
    path   = os.path.expanduser( __file__ )
    pyLIB  = Flib.load_library( 'pylib.so', path )
    #  -- [3-2] 入出力管理                 --  #
    pyLIB.calculate__shimfield_.argtypes = [
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        ctypes.POINTER( ctypes.c_int64   ),
        ctypes.POINTER( ctypes.c_int64   ),
        ctypes.POINTER( ctypes.c_int64   ),
        ctypes.POINTER( ctypes.c_int64   ),
    ]
    pyLIB.calculate__shimfield_.restype = ctypes.c_void_p

    # ---------------------------------------- #
    # --- [4]   関数呼出 / 返却            --- #
    # ---------------------------------------- #
    pyLIB.calculate__shimfield_( bfield_, mvec_, r1_, r2_, p1_, p2_, \
                                 z1_, z2_, LI_, LJ_, LK_, nB_ )
    return( bfield_ )



# ========================================================= #
# ===   実行部                                          === #
# ========================================================= #

if ( __name__=="__main__" ):

    import nkUtilities.equiSpaceGrid as esg
    x1MinMaxNum   = [ 0.0, 1.0, 11 ]
    x2MinMaxNum   = [ 0.0, 1.0, 11 ]
    x3MinMaxNum   = [ 0.0, 0.0,  1 ]
    ret           = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                       x3MinMaxNum=x3MinMaxNum, returnType = "point" )
    
    bfield        = np.zeros( (ret.shape[0],6) )
    bfield[:,0:3] = np.copy( ret[:,:] )

    mvec          = np.array( [0.0,0.0,-2.07] )
    r1, r2        = 0.60, 0.70
    p1, p2        = 45.0, 55.0
    z1, z2        = 0.30, 0.40
    LI, LJ, LK    = 20, 20, 20
    p1, p2        = p1/180.0*np.pi, p2/180.0*np.pi

    ret = calculate__shimField( bfield=bfield, mvec=mvec, r1=r1, r2=r2, p1=p1, p2=p2, \
                                z1=z1, z2=z2, LI=LI, LJ=LJ, LK=LK )
    print( ret.shape )
