import numpy as np
import os, sys
import gmsh

# ========================================================= #
# ===  improve__mesh                                    === #
# ========================================================= #

def improve__mesh():

    # ------------------------------------------------- #
    # --- [1] initialization of the gmsh            --- #
    # ------------------------------------------------- #
    gmsh.initialize()
    gmsh.option.setNumber( "General.Terminal", 1 )
    gmsh.option.setNumber( "Mesh.Algorithm"  , 1 )
    gmsh.option.setNumber( "Mesh.Algorithm3D", 1 )
    gmsh.option.setNumber( "Mesh.SubdivisionAlgorithm", 1 )
    gmsh.model.add( "model" )

    # ------------------------------------------------- #
    # --- [2] Merge Model                           --- #
    # ------------------------------------------------- #

    gmsh.merge( inpFile )

    # ------------------------------------------------- #
    # --- [3] optimize                              --- #
    # ------------------------------------------------- #

    if   ( ".bdf" in inpFile ):
        outFile = inpFile.replace( ".bdf", "_opt.bdf" )
    elif ( ".msh" in inpFile ):
        outFile = inpFile.replace( ".msh", "_opt.msh" )
        
    gmsh.model.mesh.optimize( "Laplace2D"  )
    gmsh.model.mesh.optimize( "Relocate3D" )
    gmsh.model.mesh.optimize( "Netgen" )
    gmsh.write( outFile )
    gmsh.finalize()

    
    return()

    


# ========================================================= #
# ===   実行部                                          === #
# ========================================================= #

if ( __name__=="__main__" ):
    

    gmsh.initialize()
    gmsh.option.setNumber( "General.Terminal", 1 )
    gmsh.option.setNumber( "Mesh.Algorithm"  , 1 )
    gmsh.option.setNumber( "Mesh.Algorithm3D", 1 )
    gmsh.option.setNumber( "Mesh.SubdivisionAlgorithm", 1 )
    gmsh.model.add( "model" )
    
    

    make__geometry()
    
    gmsh.model.occ.synchronize()
    gmsh.model.occ.removeAllDuplicates()
    gmsh.model.occ.synchronize()


    # ------------------------------------------------- #
    # --- [3] Mesh settings                         --- #
    # ------------------------------------------------- #
    
    # meshFile = "dat/mesh.conf"
    # import nkGmshRoutines.assign__meshsize as ams
    # meshes = ams.assign__meshsize( meshFile=meshFile )
    
    gmsh.option.setNumber( "Mesh.CharacteristicLengthMin", 0.1 )
    gmsh.option.setNumber( "Mesh.CharacteristicLengthMax", 0.1 )
    

    # ------------------------------------------------- #
    # --- [4] post process                          --- #
    # ------------------------------------------------- #
    gmsh.model.occ.synchronize()
    gmsh.model.mesh.generate(3)
    gmsh.write( "msh/model.msh" )
    gmsh.finalize()
    

