import numpy as np
import sys
import gmsh

# ------------------------------------------------- #
# --- [1] initialization of the gmsh            --- #
# ------------------------------------------------- #
gmsh.initialize()
gmsh.option.setNumber( "General.Terminal", 1 )
gmsh.option.setNumber("Mesh.Algorithm", 2)
# 1 : Mesh Adapt
# 2 : Delauney
# 3 : MeshAdapt
# 4 : 
gmsh.model.add( "ex3" )

# ------------------------------------------------- #
# --- [2] point definition                      --- #
# ------------------------------------------------- #
lc              = 10.0
PhysicalLine    = 1
PhysicalSurface = 2
PhysicalVolume  = 3
#  -- [2-1] magnet definition                   --  #
Hgap    = 100.0
rPole   = 400.0
Wslot   = 200.0
Hslot   = 300.0
rYoke   = 800.0
HYoke   = 800.0
pts     = {}
pts["magnet1"] = [   0.0      , 0.0, Hgap , lc, 1 ]
pts["magnet2"] = [ rPole      , 0.0, Hgap , lc, 2 ]
pts["magnet3"] = [ rPole      , 0.0, Hslot, lc, 3 ]
pts["magnet4"] = [ rPole+Wslot, 0.0, Hslot, lc, 4 ]
pts["magnet5"] = [ rPole+Wslot, 0.0, 0.0  , lc, 5 ]
pts["magnet6"] = [ rYoke      , 0.0, 0.0  , lc, 6 ]
pts["magnet7"] = [ rYoke      , 0.0, Hslot, lc, 7 ]
pts["magnet8"] = [ rYoke      , 0.0, HYoke, lc, 8 ]
pts["magnet9"] = [   0.0      , 0.0, HYoke, lc, 9 ]
pts_list       = [ "magnet1", "magnet2", "magnet3", "magnet4", "magnet5", "magnet6", \
                   "magnet7", "magnet8", "magnet9" ]
for key in pts_list:
    ret = gmsh.model.geo.addPoint( pts[key][0], pts[key][1], pts[key][2], pts[key][3], pts[key][4] )
    
#  -- [2-2] coil definition                     --  #
rCenter = 500.0
zCenter = 200.0
rWidth  =  80.0
zWidth  =  80.0
pts["coil1"] = [ rCenter-rWidth/2, 0.0, zCenter-zWidth/2, lc, 10 ]
pts["coil2"] = [ rCenter+rWidth/2, 0.0, zCenter-zWidth/2, lc, 11 ]
pts["coil3"] = [ rCenter+rWidth/2, 0.0, zCenter+zWidth/2, lc, 12 ]
pts["coil4"] = [ rCenter-rWidth/2, 0.0, zCenter+zWidth/2, lc, 13 ]
pts_list     = [ "coil1", "coil2", "coil3", "coil4" ]
for key in pts_list:
    gmsh.model.geo.addPoint( pts[key][0], pts[key][1], pts[key][2], pts[key][3], pts[key][4] )

# ------------------------------------------------- #
# --- [3] line definition                       --- #
# ------------------------------------------------- #
#  -- [3-1] magnet Line definition              --  #
magnetLineGroup = 1
ties            = [ [ "magnet1", "magnet2", 1 ], \
                    [ "magnet2", "magnet3", 2 ], \
                    [ "magnet3", "magnet4", 3 ], \
                    [ "magnet4", "magnet5", 4 ], \
                    [ "magnet5", "magnet6", 5 ], \
                    [ "magnet6", "magnet7", 6 ], \
                    [ "magnet7", "magnet8", 7 ], \
                    [ "magnet8", "magnet9", 8 ], \
                    [ "magnet9", "magnet1", 9 ]  ]
magnetLineLoop  = [ tie[2] for tie in ties ]
for tie in ties:
    gmsh.model.geo.addLine( pts[tie[0]][4], pts[tie[1]][4], tie[2] )
gmsh.model.addPhysicalGroup( PhysicalLine, magnetLineLoop, magnetLineGroup )
gmsh.model.geo.addCurveLoop( magnetLineLoop, magnetLineGroup )

#  -- [3-2] coil Line definition                --  #
CoilLineGroup = 2
ties          = [ ["coil1","coil2",10], \
                  ["coil2","coil3",11], \
                  ["coil3","coil4",12], \
                  ["coil4","coil1",13]  ]
CoilLineLoop  = [ tie[2] for tie in ties ]
for tie in ties:
    gmsh.model.geo.addLine( pts[tie[0]][4], pts[tie[1]][4], tie[2] )
gmsh.model.addPhysicalGroup( PhysicalLine, CoilLineLoop, CoilLineGroup )
gmsh.model.geo.addCurveLoop( CoilLineLoop, CoilLineGroup )

# ------------------------------------------------- #
# --- [4] surface definition                    --- #
# ------------------------------------------------- #
#  -- [4-1] magnet Surface definition           --  #
magnetSurface = 1
gmsh.model.geo.addPlaneSurface( [magnetLineGroup], magnetSurface )
gmsh.model.addPhysicalGroup( PhysicalSurface, [magnetSurface], magnetSurface )
#  -- [4-2] coil Surface definition             --  #
CoilSurface   = 2
gmsh.model.geo.addPlaneSurface( [CoilLineGroup], CoilSurface )
gmsh.model.addPhysicalGroup( PhysicalSurface, [CoilSurface], CoilSurface )

# ------------------------------------------------- #
# --- [5] volume definition                     --- #
# ------------------------------------------------- #
origin = [0,0,0]
rot_ax = [0,0,1]
angle  = np.pi
nElems = 100
#  -- [5-1] revolve magnet                      --  #
magnetVolume1 = 1
vol1 = gmsh.model.geo.revolve( [(2,magnetLineGroup)], origin[0], origin[1], origin[2], \
                               rot_ax[0],rot_ax[1],rot_ax[2], + angle, [nElems], recombine=True )
gmsh.model.addPhysicalGroup( PhysicalVolume, [ vol1[1][1] ], magnetVolume1 )
#  -- [5-2] revolve coil                        --  #
CoilVolume1 = 2
vol1 = gmsh.model.geo.revolve( [(2,CoilLineGroup)], origin[0], origin[1], origin[2], \
                               rot_ax[0],rot_ax[1],rot_ax[2], + angle, [nElems], recombine=True )
gmsh.model.addPhysicalGroup( vol1[1][0], [ vol1[1][1] ], CoilVolume1 )

# ------------------------------------------------- #
# --- [4] post process                          --- #
# ------------------------------------------------- #
gmsh.model.geo.synchronize()
gmsh.model.mesh.generate(3)
gmsh.write( "ex3.geo_unrolled" )
gmsh.write( "ex3.msh" )
gmsh.finalize()
