import numpy as np
import nkUtilities.load__pointFile as lpf


# ========================================================= #
# ===  prepare__shape                                   === #
# ========================================================= #

def prepare__shape():

    # ------------------------------------------------- #
    # --- [1] Arguments                             --- #
    # ------------------------------------------------- #

    x_,y_,z_ = 0, 1, 2
    i_,s_,f_ = 3, 4, 5
    
    import nkUtilities.load__constants as lcn
    cnsFile  = "dat/parameter.conf"
    const    = lcn.load__constants( inpFile=cnsFile )

    wcfFile  = "dat/weights.conf"
    wconf    = lcn.load__constants( inpFile=wcfFile )

    # ------------------------------------------------- #
    # --- [2] Grid Data Loading                     --- #
    # ------------------------------------------------- #
    
    inpFile  = "dat/mshape_svd.dat"
    gridData = lpf.load__pointFile( inpFile=inpFile, returnType="structured" )
    gridData = np.reshape( gridData, ( gridData.shape[1],gridData.shape[2], gridData.shape[3] ) ) 
    print( gridData.shape )

    # ------------------------------------------------- #
    # --- [3] generate Grid to be interpolated      --- #
    # ------------------------------------------------- #
    
    import nkUtilities.equiSpaceGrid as esg
    x1MinMaxNum = [ const["x1Min"], const["x1Max"], const["LI"] ]
    x2MinMaxNum = [ const["x2Min"], const["x2Max"], const["LJ"] ]
    x3MinMaxNum = [            0.0,            0.0,           1 ]
    pointData   = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                     x3MinMaxNum=x3MinMaxNum, returnType = "point" )
    print( pointData.shape )

    # ------------------------------------------------- #
    # --- [4] interpolation                         --- #
    # ------------------------------------------------- #
    
    import nkInterpolator.LinearInterp2D as li2
    ret         = li2.LinearInterp2D( gridData=gridData, pointData=pointData, gridDataType="structured" )

    wData       = np.zeros( (ret.shape[0],6) )
    wData[:,x_] = np.copy( ret[:,0] )
    wData[:,y_] = np.copy( ret[:,1] )
    wData[:,z_] = np.copy( ret[:,2] )
    wData[:,i_] = np.copy( ret[:,2] )
    wData[:,s_] = 0.0
    wData[:,f_] = 0.0

    dx              = ( const["x1Max"] - const["x1Min"] ) / ( const["LI"] - 1 )
    dy              = ( const["x2Max"] - const["x2Min"] ) / ( const["LJ"] - 1 )
    ddx             = dx / ( const["nDiv_B"] )
    ddy             = dy / ( const["nDiv_B"] )
    dist_x          = 0.5 * dx - 0.5 * ddx
    dist_y          = 0.5 * dy - 0.5 * ddy
    radii1          = np.sqrt( ( wData[:,x_] - dist_x )**2 + ( wData[:,y_] - dist_y )**2 )
    radii2          = np.sqrt( ( wData[:,x_] - dist_x )**2 + ( wData[:,y_] + dist_y )**2 )
    radii3          = np.sqrt( ( wData[:,x_] + dist_x )**2 + ( wData[:,y_] - dist_y )**2 )
    radii4          = np.sqrt( ( wData[:,x_] + dist_x )**2 + ( wData[:,y_] + dist_y )**2 )
    index           = np.where( ( ( radii1 <= const["rLim2"] ) & ( radii1 >= const["rLim1"] ) ) | \
                                ( ( radii2 <= const["rLim2"] ) & ( radii2 >= const["rLim1"] ) ) | \
                                ( ( radii3 <= const["rLim2"] ) & ( radii3 >= const["rLim1"] ) ) | \
                                ( ( radii4 <= const["rLim2"] ) & ( radii4 >= const["rLim1"] ) ) )
    # -- primitive ver. -- #
    # radii0          = np.sqrt( ( wData[:,x_] )**2 + ( wData[:,y_] )**2 )
    # index           = np.where( ( ( radii0 <= const["rLim2"] ) & ( radii0 >= const["rLim1"] ) ) )
    # -------------------- #
    wData[index,f_] = 1.0
    
    # ------------------------------------------------- #
    # --- [5] exception  ( peeler )                 --- #
    # ------------------------------------------------- #

    if ( const["except_sw"] ):
        theta           = np.arctan2( wData[:,y_], wData[:,x_] ) * 180.0 / np.pi
        theta[ np.where( theta < 0.0 ) ] = theta[ np.where( theta < 0.0 ) ] + 360.0
        index           = np.where( ( ( radii1 >= const["ex_radii1"] ) & \
                                      ( theta  >= const["ex_theta1"] ) & ( theta  <= const["ex_theta2"] ) ) )
        wData[index,f_] = 0.0
        index           = np.where( ( ( radii2 >= const["ex_radii1"] ) & \
                                      ( theta  >= const["ex_theta1"] ) & ( theta  <= const["ex_theta2"] ) ) )
        wData[index,f_] = 0.0
        index           = np.where( ( ( radii3 >= const["ex_radii1"] ) & \
                                      ( theta  >= const["ex_theta1"] ) & ( theta  <= const["ex_theta2"] ) ) )
        wData[index,f_] = 0.0
        index           = np.where( ( ( radii4 >= const["ex_radii1"] ) & \
                                      ( theta  >= const["ex_theta1"] ) & ( theta  <= const["ex_theta2"] ) ) )
        wData[index,f_] = 0.0

    # ------------------------------------------------- #
    # --- [6] load saved shape                      --- #
    # ------------------------------------------------- #
    if ( const["load_savedShape"] ):
        print( "[prepare__shape] import saved shape :: {0} ".format( const["saved_filename"] ) )
        saved = lpf.load__pointFile( inpFile=const["saved_filename"], returnType="structured" )
        saved = np.reshape( saved, ( saved.shape[1],saved.shape[2], saved.shape[3] ) ) 
        LI,LJ = saved.shape[1], saved.shape[0]
        print( "[prepare__shape] import shape == (LI,LJ) == ({0},{1})".format( LI, LJ ) )
        if ( ( LI==const["LI"] ) & ( LJ==const["LJ"] ) ):
            wData[:,z_] = np.reshape( saved[:,:,z_], ( -1, ) )
            wData[:,s_] = np.reshape( saved[:,:,z_], ( -1, ) ) - wData[:,i_]
        else:
            gridData    = np.reshape( saved[:,:,x_:z_+1], (LJ,LI,3) )
            import nkInterpolator.LinearInterp2D as li2
            ret         = li2.LinearInterp2D( gridData=gridData, pointData=pointData, gridDataType="structured" )
            wData[:,z_] = ret[:,z_]
            wData[:,s_] = ret[:,z_] - wData[:,i_]
            
    # ------------------------------------------------- #
    # --- [7] save data & figure                    --- #
    # ------------------------------------------------- #

    wData_          = np.reshape( wData, (const["LJ"],const["LI"],6) )

    import nkUtilities.save__pointFile as spf
    outFile   = "dat/mshape_input.dat"
    spf.save__pointFile( outFile=outFile, Data=wData_ )
    
    import nkUtilities.cMapTri as cmt
    cmt.cMapTri( xAxis=wData[:,x_], yAxis=wData[:,y_], cMap=wData[:,z_], pngFile="png/mshape_input_z.png" )
    cmt.cMapTri( xAxis=wData[:,x_], yAxis=wData[:,y_], cMap=wData[:,i_], pngFile="png/mshape_input_i.png" )
    cmt.cMapTri( xAxis=wData[:,x_], yAxis=wData[:,y_], cMap=wData[:,f_], pngFile="png/mshape_input_f.png" )


# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):

    prepare__shape()
