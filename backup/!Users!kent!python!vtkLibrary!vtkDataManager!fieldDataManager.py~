import numpy as np


# ========================================================= #
# ===  fieldDataManager                                 === #
# ========================================================= #
class fieldDataManager():

    # ------------------------------------------------- #
    # --- field Data Manager Initialization         --- #
    # ------------------------------------------------- #
    def __init__( self, Data=None, tag=None, DataOrder=None, DataType=None ):
        
        self.Data  = {}
        self.tags  = []

        if ( ( Data is not None ) and ( Data is not None ) ):
            self.add__fieldDataStruct( Data=Data, tag=tag, DataOrder=DataOrder, DataType=DataType )

            
    # ------------------------------------------------- #
    # --- add field Data structure                  --- #
    # ------------------------------------------------- #
    def add__fieldDataStruct( self, Data=None, tag=None, DataOrder=None, DataType=None ):

        self.Data[ tag ] = fieldDataStruct( Data=Data, tag=tag, \
                                            DataOrder=DataOrder, DataType=DataType )
        self.tags.append( tag ) 


    # ------------------------------------------------- #
    # --- show all field Data information           --- #
    # ------------------------------------------------- #
    def print__fieldDataInfo( self ):

        for tag in self.tags:
            print( self.Data[tag].return__DataInfo() )

    # ------------------------------------------------- #
    # --- convert all structured data into point    --- #
    # ------------------------------------------------- #
    def convert__point2structured( self, shape=None ):

        for tag in self.tags:
            if ( self.Data[tag].DataType == "point" ):
                self.Data[tag].convert__point2structured( shape=shape )

    # ------------------------------------------------- #
    # --- convert all point data into structured    --- #
    # ------------------------------------------------- #
    def convert__structured2point( self ):
        
        for tag in self.tags:
            if ( self.Data[tag].DataType == "structured" ):
                self.Data[tag].convert__structured2point()

            

# ========================================================= #
# ===  single field Data Structure                      === #
# ========================================================= #
class fieldDataStruct():

    # ------------------------------------------------- #
    # --- field Data initialize                     --- #
    # ------------------------------------------------- #
    def __init__( self     , Data       =None, tag  =None, DataOrder=None, DataType=None, \
                  ndim=None, nComponents=None, nData=None, size     =None, shape   =None ):
        
        self.store__fieldData( Data=Data, tag =tag , DataOrder=DataOrder, DataType=DataType, \
                               ndim=ndim, size=size, shape    =shape    , nData   =nData   , \
                               nComponents=nComponents )
            
    # ------------------------------------------------- #
    # --- add field Data information                --- #
    # ------------------------------------------------- #
    def store__fieldData( self     , Data       =None, tag  =None, DataOrder=None, DataType=None, \
                          ndim=None, nComponents=None, nData=None, size     =None, shape   =None, \
                          variableType=None ):
        # -- compulsory components   -- #
        self.Data         = Data
        self.tag          = tag
        # -- with prefered default   -- #
        self.DataType     = DataType
        self.DataOrder    = DataOrder
        # -- automatical resolvables -- #
        self.ndim         = ndim
        self.nComponents  = nComponents
        self.nData        = nData
        self.size         = size
        self.shape        = shape
        self.variableType = variableType

        # -- if Data is given, set attributes -- #
        if ( self.Data is not None ):
            self.resolve__attributes()

        
    # ------------------------------------------------- #
    # --- set attributes resolved from Data         --- #
    # ------------------------------------------------- #
    def resolve__attributes( self ):
        
        # -- raise error; if needed data is not given -- #
        if ( self.Data      is None ):
            sys.exit( "[set__guessedAttributes-@fieldDataStruct-] self.Data is None [ERROR]" )
        if ( self.tag       is None ):
            sys.exit( "[set__guessedAttributes-@fieldDataStruct-] self.tag  is None [ERROR]" )
        # -- set prefarable parameters                -- #    
        if ( self.DataOrder is None ):
            self.DataOrder = "ijk"
        if ( self.DataType  is None ):
            if   ( self.Data.ndim == 1 ):
                self.DataType = "1darray"
            elif ( self.Data.ndim == 2 ):
                self.DataType = "point"
            elif ( self.Data.ndim  > 3 ):
                self.DataType = "structured"

        # -- resolve ndim -- #
        if ( self.ndim is None ):
            self.ndim = self.Data.ndim
            
        # -- resolve nComponents -- #
        if ( self.nComponents is None ):
            if   ( self.DataType == "1darray"    ):
                self.nComponents = 1
            elif ( self.DataType == "image"      ):
                self.nComponents = 1
            elif ( self.DataType == "point"      ):
                self.nComponents = self.Data.shape[1]
            elif ( self.DataType == "structured" ):
                if   ( self.DataOrder == "ijk" ):
                    self.nComponents = self.Data.shape[-1]
                elif ( self.DataOrder == "kji" ):
                    self.nComponents = self.Data.shape[ 0]
                    
        # -- resolve nData -- #
        if ( self.nData is None ):
            if   ( self.DataType == "1darray"    ):
                self.nData       = self.Data.size
            elif ( self.DataType == "image"      ):
                self.nData       = self.Data.size
            elif ( self.DataType == "point"      ):
                self.nData       = self.Data.shape[0]
            elif ( self.DataType == "structured" ):
                if   ( self.DataOrder == "ijk" ):
                    self.nData       = np.prod( self.Data.shape[:-1] )
                elif ( self.DataOrder == "kji" ):
                    self.nComponents = np.prod( self.Data.shape[1: ] )
            
        # -- resolve size  -- #
        if ( self.size  is None ):
            self.size  = self.Data.shape

        # -- resolve shape -- #
        if ( self.shape is None ):
            self.shape = self.Data.shape

        # -- resolve variable Type :: vtk Data Type -- #
        if ( self.variableType is None ):
            if ( self.Data.dtype == np.int32   ): self.variableType = "Int32"
            if ( self.Data.dtype == np.int64   ): self.variableType = "Int64"
            if ( self.Data.dtype == np.float32 ): self.variableType = "Float32"
            if ( self.Data.dtype == np.float64 ): self.variableType = "Float64"


    
    # ------------------------------------------------- #
    # --- return Data information                   --- #
    # ------------------------------------------------- #
    def return__DataInfo( self ):
        ret = { "tag" :self.tag , "DataType":self.DataType, "DataOrder"  :self.DataOrder  , \
                "ndim":self.ndim, "nData"   :self.nData   , "nComponents":self.nComponents, \
                "size":self.size, "shape"   :self.shape   }
        return( ret )


    # ------------------------------------------------- #
    # --- convert point Data -> structured          --- #
    # ------------------------------------------------- #
    def convert__point2structured( self, shape=None ):
        # -- Argument Check  -- #
        if ( shape is None ):
            if ( self.shape == self.size ):
                sys.exit( "[convert__point2structured-@fieldDataStruct-] shape is None [ERROR]" )
            else:
                shape = self.shape
        if ( self.DataType != "point" ):
            sys.exit( "[convert__point2structured-@fieldDataStruct-] self.DataType is not point [ERROR]" )
        # -- conversion      -- #
        self.Data     = np.reshape( self.Data, shape )
        # -- update info     -- #
        self.DataType = "structured"
        self.shape    = shape
        self.size     = self.Data.shape

        
    # ------------------------------------------------- #
    # --- convert point structured -> Data          --- #
    # ------------------------------------------------- #
    def convert__structured2point( self ):
        # -- Argument Check  -- #
        if ( self.DataType != "structured" ):
            sys.exit( "[convert__point2structured-@fieldDataStruct-] self.DataType is not point [ERROR]" )
        # -- conversion      -- #
        if ( self.DataOrder == "ijk" ):
            self.Data  = np.reshape( self.Data, (self.nData,self.nComponents) )
        if ( self.DataOrder == "kji" ):
            self.Data  = np.transpose( np.reshape( self.Data, (self.nComponents,self.nData) ) )
        # -- update info     -- #
        self.shape     = (self.nData,self.nComponents)
        self.DataType  = "point"
        self.size      = self.Data.shape

        
# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):

    manager = fieldDataManager()
    
    import nkUtilities.equiSpaceGrid as esg
    x1MinMaxNum = [ 0.0, 1.0, 11 ]
    x2MinMaxNum = [ 0.0, 1.0, 11 ]
    x3MinMaxNum = [ 0.0, 1.0, 11 ]
    ret1         = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
                                     x3MinMaxNum=x3MinMaxNum, returnType = "structured" )
    manager.add__fieldDataStruct( Data=ret1, tag="ret1" )
    
    import nkUtilities.generate__testprofile as gtp
    x1MinMaxNum = [ 0.0, 1.0, 11 ]
    x2MinMaxNum = [ 0.0, 1.0, 11 ]
    x3MinMaxNum = [ 0.0, 1.0, 11 ]
    ret2        = gtp.generate__testprofile( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
    	                                     x3MinMaxNum=x3MinMaxNum, returnType = "point" )
    manager.add__fieldDataStruct( Data=ret2, tag="ret2",  )

    print()
    manager.print__fieldDataInfo()

    # manager.Data["ret1"].convert__structured2point()
    # manager.Data["ret2"].convert__point2structured( shape=(11,11,11,4) )

    print()
    manager.convert__point2structured( shape=(11,11,11,4) )
    manager.print__fieldDataInfo()

    print()
    manager.convert__structured2point()
    manager.print__fieldDataInfo()
