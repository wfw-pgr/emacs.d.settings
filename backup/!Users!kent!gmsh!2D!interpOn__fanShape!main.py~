import numpy as np
import os, sys, subprocess
import gmsh

gmshlib = os.environ["gmshLibraryPath"]
sys.path.append( gmshlib )
import generate__fanShape as fan

# ------------------------------------------------- #
# --- [1] initialization of the gmsh            --- #
# ------------------------------------------------- #
gmsh.initialize()
gmsh.option.setNumber( "General.Terminal", 1 )
gmsh.model.add( "model" )

# ------------------------------------------------- #
# --- [2] initialize settings                   --- #
# ------------------------------------------------- #
ptsDim , lineDim , surfDim , voluDim  =  0,  1,  2,  3
pts    , line    , surf    , volu     = {}, {}, {}, {}
ptsPhys, linePhys, surfPhys, voluPhys = {}, {}, {}, {}
lc                                    = 0.01
x_, y_, z_, lc_, tag_                 = 0, 1, 2, 3, 4

# ------------------------------------------------- #
# --- [3] Modeling                              --- #
# ------------------------------------------------- #

r1        = 0.6
r2        = 0.7
th1       = 280.0
th2       = 320.0
zoffset   = 0.0

fanObject = fan.generate__fanShape( lc=lc, r1=r1, r2=r2, th1=th1, th2=th2, \
                                    zoffset=zoffset, defineSurf=True )
surf["fan"] = fanObject["surf"]["fan"]

# ------------------------------------------------- #
# --- [4] Physical Grouping                     --- #
# ------------------------------------------------- #
gmsh.model.occ.synchronize()
surfPhys["fan"]   = gmsh.model.addPhysicalGroup( surfDim, [ surf["fan"] ], tag=201 )

# ------------------------------------------------- #
# --- [5] post process                          --- #
# ------------------------------------------------- #
gmsh.model.occ.synchronize()
gmsh.model.mesh.generate(2)
gmsh.write( "model.geo_unrolled" )
gmsh.write( "model.msh" )
gmsh.finalize()


# ------------------------------------------------- #
# --- [6] ElmerGrid execution                   --- #
# ------------------------------------------------- #
cmd = "ElmerGrid 14 2 model.msh"
subprocess.call( cmd.split() )


# ------------------------------------------------- #
# --- [7] interpOnMesh                          --- #
# ------------------------------------------------- #

import interpOnMesh as itp

gridFile = "dat/grid.dat"
meshFile = "model/mesh.nodes"

itp.interpOnMesh( gridFile=gridFile, meshFile=meshFile )


