import numpy                               as np
import nkUtilities.load__constants         as lcn
import nkMeshRoutines.save__elmerNodeFile as sen

# ========================================================= #
# ===  modify_pole                                      === #
# ========================================================= #

def modify__pole():

    i_,f_,x_,y_,z_ = 0, 1, 2, 3, 4
    
    # ------------------------------------------------- #
    # --- [1] Load config & node Files              --- #
    # ------------------------------------------------- #

    confFile = "dat/modify.conf"
    poleFile = "dat/pole_pelSide.nodes"
    peelFile = "dat/peeler.nodes"
    
    const    = lcn.load__constants( inpFile=confFile )
    with open( poleFile, "r" ) as f:
        pole = np.loadtxt( f )
    with open( peelFile, "r" ) as f:
        peel = np.loadtxt( f )
        
    radii = np.sqrt( pole[:,x_]**2 + pole[:,y_]**2 )
    angle = np.arctan2( pole[:,y_], pole[:,x_] ) * 180.0 / np.pi
    angle[ np.where( angle < 0.0 ) ] += 360.0
    index = np.where( ( radii > const["r1"]  ) & ( radii < const["r2"]  ) \
                    & ( angle > const["th1"] ) & ( angle < const["th2"] ) )

    modif = np.copy( ( pole[index] )[:,2:] )
    peel  = np.copy( peel[:,2:] )
    import nkInterpolator.barycentric__interpolator as bci
    ret   = bci.barycentric__interpolator( nodes=peel, points=modif )

    for ik,il in enumerate( index[0] ):
        pole[il,z_] = ret[ik,2]
    # ( pole[index] )[:,z_] = np.copy( ret[:,2] )
    
    modiFile = "dat/pole_modified.nodes"
    sen.save__elmerNodeFile( nodes=pole, nodeFile=modiFile )
    
    return()



# ========================================================= #
# ===   実行部                                          === #
# ========================================================= #

if ( __name__=="__main__" ):

    modify__pole()
