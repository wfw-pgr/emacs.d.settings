import sys
import numpy         as np
import gmsh_api.gmsh as gmsh

# ========================================================= #
# ===  generate regenerator Shim Model                  === #
# ========================================================= #
def generate__regenShimParts( lc=0.1, height_tier2=0.10, \
                              nodeFile="dat/shim_3d.nodes", elemFile="dat/shim.elements" ):

    # ------------------------------------------------- #
    # --- [1] settings                              --- #
    # ------------------------------------------------- #
    ptsDim , lineDim , surfDim , voluDim  =  0,  1,  2,  3
    pts    , line    , surf    , volu     = {}, {}, {}, {}
    ptsPhys, linePhys, surfPhys, voluPhys = {}, {}, {}, {}
    x_, y_, z_, lc_, tag_                 = 0, 1, 2, 3, 4

    origin    = [ 0.0, 0.0 ]
    
    # ------------------------------------------------- #
    # --- [2] Preparation                           --- #
    # ------------------------------------------------- #
    
    #  -- [2-1] Loading mesh / nodes                --  #
    with open( nodeFile, "r" ) as f:
        nodes = np.loadtxt( f )
    with open( elemFile, "r" ) as f:
        elems = np.loadtxt( f )
    nNodes = nodes.shape[0]
    nElems = elems.shape[0]

    # ------------------------------------------------- #
    # --- [3] add tier2 points / lines / surfaces   --- #
    # ------------------------------------------------- #

    import edgeDetect2D as edg
    edgeLines      = edg.edgeDetect2D( elemFile )
    
    #  -- [3-1] generate points                     --  #
    for iN1,iN2 in edgeLines:
        key            = "pts_tier2_{0:06}".format( iN1 )
        pts[key]       = [ nodes[iN1-1,2+x_], nodes[iN1-1,2+y_], height_tier2, lc, 0 ]
        pts[key][tag_] = gmsh.model.occ.addPoint( pts[key][x_], pts[key][y_], pts[key][z_], \
                                                  meshSize=pts[key][lc_] )
        
    #  -- [3-2] generate lines                      --  #
    tier2_line_keys    = []
    for iN1,iN2 in edgeLines:
        key1, key2     = "pts_tier2_{0:06}".format( iN1 ), "pts_tier2_{0:06}".format( iN2 )
        minv, maxv     = min( iN1, iN2 ), max( iN1, iN2 )  # -- for unique naming -- #
        linekey        = "line_tier2_{0:06}_{1:06}".format( minv, maxv )
        line[linekey]  = gmsh.model.occ.addLine( pts[key1][tag_], pts[key2][tag_] )
        tier2_line_keys.append( linekey )

    #  -- [3-3] generate surface                    --  #
    LineLoop      = [   line[key] for key in tier2_line_keys ]
    LineLoopGroup = gmsh.model.occ.addCurveLoop( LineLoop )
    surf["tier2"] = gmsh.model.occ.addPlaneSurface( [LineLoopGroup] )
        
    # ------------------------------------------------- #
    # --- [4] add tier1 points / lines / surfaces   --- #
    # ------------------------------------------------- #

    #  -- [4-1] generate points                     --  #
    for iN in [ i+1 for i in range( nNodes ) ]:
        key            = "pts_tier1_{0:06}".format( iN )
        pts[key]       = [ nodes[iN-1,2+x_], nodes[iN-1,2+y_], nodes[iN-1,2+z_], lc, 0 ]
        pts[key][tag_] = gmsh.model.occ.addPoint( pts[key][x_], pts[key][y_], pts[key][z_], \
                                                  meshSize=pts[key][lc_] )

    #  -- [4-2] generate lines                      --  #
    roll_index     = [ 3, 4, 5, 3 ]   # -- for triangular elements -- #
    elem_lines     = {}
    for ik in range( nElems ):
        elem_key             = "elem_{0:06}".format( ik+1 )
        helem                = elems[ik,:]
        elem_lines[elem_key] = [ 0, 0, 0 ]  # -- initialize -- #
        #  -- for every vertex combination -- #
        for ir in range(3):
            pt1, pt2   = int( helem[roll_index[ir]] ), int( helem[roll_index[ir+1]] )
            minv, maxv = min( pt1, pt2 ), max( pt1, pt2 )  # -- for unique naming -- #
            key        = "line_tier1_{0:06}_{1:06}".format( minv, maxv )
            if ( key in line ):   #  -- if exists, obtain tag #.       -- #
                elem_lines[elem_key][ir] = line[key]
            else:                 #  -- if does not exist, define line -- #
                key1, key2               = "pts_tier1_{0:06}".format( pt1 ), "pts_tier1_{0:06}".format( pt2 )
                line[key]                = gmsh.model.occ.addLine( pts[key1][tag_], pts[key2][tag_] )
                elem_lines[elem_key][ir] = line[key]

    #  -- [4-3] generate surface                    --  #
    tier1_surfLoop = []
    for ik in range( nElems ):
        elem_key       = "elem_{0:06}".format( ik+1 )
        hLineLoop      = [ elem_lines[elem_key][0], elem_lines[elem_key][1], elem_lines[elem_key][2] ]
        hLineLoopGroup = gmsh.model.occ.addCurveLoop( hLineLoop )
        surf[elem_key] = gmsh.model.occ.addPlaneSurface( [hLineLoopGroup] )
        tier1_surfLoop.append( surf[elem_key] )


    # ------------------------------------------------- #
    # --- [5] tier 1-2 wall making                  --- #
    # ------------------------------------------------- #
    
    #  -- [5-1] generate lines                      --  #
    for iN1,iN2 in edgeLines:
        key1, key2 = "pts_tier1_{0:06}".format( iN1 ), "pts_tier2_{0:06}".format( iN1 )
        key        = "shimWallLine_12_{0:06}".format( iN1 )
        line[key]  = gmsh.model.occ.addLine( pts[key1][tag_], pts[key2][tag_] )

    #  -- [5-2] generate arc surfaces               --  #
    wall_12_surfLoop = []
    for iN1,iN2 in edgeLines:
        minv, maxv = min( iN1, iN2 ), max( iN1, iN2 )
        key1, key3 = "shimWallLine_12_{0:06}".format(iN1), "shimWallLine_12_{0:06}".format(iN2)
        key2, key4 = "line_tier2_{0:06}_{1:06}".format( minv, maxv ), "line_tier1_{0:06}_{1:06}".format( minv, maxv )
        key        = "shimWallSurf_12_{0:06}_{1:06}".format( iN1, iN2 )
        hLineLoop  = [ line[key1], line[key2], - line[key3], - line[key4] ]
        hLineGroup = gmsh.model.occ.addCurveLoop( hLineLoop )
        surf[key]  = gmsh.model.occ.addPlaneSurface( [hLineGroup] )
        wall_12_surfLoop.append( surf[key] )

    # ------------------------------------------------- #
    # --- [6] add Volume by surface Loop            --- #
    # ------------------------------------------------- #
    gmsh.model.occ.removeAllDuplicates()
    shim_surfLoop  = [ surf["tier2"] ] + wall_12_surfLoop + tier1_surfLoop
    shim_surfGroup = gmsh.model.occ.addSurfaceLoop( shim_surfLoop )
    volu["shim"]     = gmsh.model.occ.addVolume( [shim_surfGroup] )
        
    # ------------------------------------------------- #
    # --- [7] return                                --- #
    # ------------------------------------------------- #
    ret        = { "pts":pts, "line":line, "surf":surf, "volu":volu }
    return( ret )


# ========================================================= #
# ===  procedure to call regenSHimParts                 === #
# ========================================================= #
def generate__regenShimParts__execute( lc=0.01, height_tier2=0.1, \
                                       nodeFile="dat/shim_3d.nodes", elemFile="dat/shim.elements" ):
    
    gmsh.initialize()
    gmsh.option.setNumber( "General.Terminal", 1 )
    gmsh.model.add( "example" )

    generate__regenShimParts( lc      =lc      , height_tier2=height_tier2, \
                              nodeFile=nodeFile, elemFile    =elemFile      )
    
    gmsh.model.occ.synchronize()
    gmsh.model.mesh.generate(3)
    gmsh.write( "msh/example.geo_unrolled" )
    gmsh.write( "msh/example.msh" )
    gmsh.finalize()


# ======================================== #
# ===  実行部                          === #
# ======================================== #
if ( __name__=="__main__" ):
    
    gmsh.initialize()
    gmsh.option.setNumber( "General.Terminal", 1 )
    gmsh.model.add( "example" )

    lc           = 0.01
    height_tier2 = 0.08

    generate__regenShimParts( lc=lc, height_tier2=height_tier2 )
    
    gmsh.model.occ.synchronize()
    gmsh.model.mesh.generate(3)
    gmsh.write( "msh/example.geo_unrolled" )
    gmsh.write( "msh/example.msh" )
    gmsh.finalize()

