import numpy            as np
import numpy.ctypeslib  as Flib
import ctypes, sys
import os.path
import scipy.spatial    as spa

# ================================================================ #
# ===  barycentric__interpolation                              === #
# ================================================================ #
def barycentric__interpolation( nodes=None, points=None ):
    # ---------------------------------------- #
    # --- [1]   引数チェック               --- #
    # ---------------------------------------- #
    if ( nodes  is None ): sys.exit( "[barycentric__interpolation] nodes  ???" )
    if ( points is None ): sys.exit( "[barycentric__interpolation] points ???" )

    # ---------------------------------------- #
    # --- [2]   引数準備                   --- #
    # ---------------------------------------- #
    #  -- [2-1] 使用する引数を準備         --  #

    delaunay  = spa.Delaunay( nodes )
    simplex   = np.array( delaunay.simplices, dtype=np.int64 )

    nNodes    =   nodes.shape[0]
    nPoints   =  points.shape[0]
    nSimplex  = simplex.shape[0]


    #  -- [2-2] Fortranサイズへ変換        --  #
    nodes_    =     np.array( nodes  , dtype=np.float64  )
    points_   =     np.array( points , dtype=np.float64  )
    simplex_  =     np.array( simplex, dtype=np.int64    )
    pwhere_   =     np.array( pwhere , dtype=np.int64    )
    nNodes_   = ctypes.byref( ctypes.c_int64( nNodes   ) )
    nPoints_  = ctypes.byref( ctypes.c_int64( nPoints  ) )
    nSimplex_ = ctypes.byref( ctypes.c_int64( nSimplex ) )

    # ---------------------------------------- #
    # --- [3]   ライブラリをロード         --- #
    # ---------------------------------------- #
    #  -- [3-1] ライブラリを定義           --  #
    path   = os.path.expanduser('~') + "/.python/lib/nkInterpolator"
    pyLIB  = Flib.load_library( 'pylib.so', path )
    #  -- [3-2] 入出力管理                 --  #
    pyLIB.barycentric__interpolation_.argtypes = [
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.float64 ),
        Flib.ndpointer( dtype=np.int64   ),
        ctypes.POINTER( ctypes.c_int64   ),
        ctypes.POINTER( ctypes.c_int64   ),
        ctypes.POINTER( ctypes.c_int64   ),
    ]
    pyLIB.barycentric__interpolation_.restype = ctypes.c_void_p

    # ---------------------------------------- #
    # --- [4]   関数呼出 / 返却            --- #
    # ---------------------------------------- #
    pyLIB.barycentric__interpolation_( nodes_ , points_ , simplex_, pwhere_, \
                                       nNodes_, nPoints_, nSimplex_ )
    return( points_ )


# ================================================================ #
# ===  テスト用 呼び出し                                       === #
# ================================================================ #
if ( __name__=='__main__' ):
    barycentric__interpolation()
