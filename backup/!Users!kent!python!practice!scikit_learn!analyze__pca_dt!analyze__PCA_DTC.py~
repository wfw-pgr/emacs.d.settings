import os, sys
import numpy as np

# ========================================================= #
# ===  analyze wine data using PCA & DT                 === #
# ========================================================= #

def ananlyze__PCA_DTC():

    n_components = 5
    max_depth    = 5
    test_size    = 0.6
    random_state = 0
    
    # ------------------------------------------------- #
    # --- [1] load wine data                        --- #
    # ------------------------------------------------- #
    import sklearn.datasets as ds
    wines = ds.load_wine()

    # ------------------------------------------------- #
    # --- [2] precondition :: normalization         --- #
    # ------------------------------------------------- #
    wines.avgs  = np.average( wines.data, axis=0 )
    wines.stds  = np.std    ( wines.data, axis=0, ddof=True )
    avgs_expand = np.repeat ( wines.avgs[None,:], wines.data.shape[0], axis=0  )
    stds_expand = np.repeat ( wines.stds[None,:], wines.data.shape[0], axis=0  )
    wines.norms = ( wines.data - avgs_expand ) / sts_expand

    # ------------------------------------------------- #
    # --- [3] precondition :: PCA                   --- #
    # ------------------------------------------------- #
    import sklearn.decomposition as dcm
    wines.pca     = dcm.PCA( n_components=n_components )
    wines.pca.fit( wines.norms )
    wines.reduced = wines.pca.transform( wines.norms )

    # ------------------------------------------------- #
    # --- [4] Decision Tree Classifier              --- #
    # ------------------------------------------------- #
    #  -- [4-1] split train / test data             --  #
    import sklearn.model_selection as ms
    xTrain, xTest = ms.train_test_split( wines.reduced, test_size=test_size,\
                                         random_state=random_state )
    yTrain, yTest = ms.train_test_split( wines.target , test_size=test_size,\
                                         random_state=random_state )
    import sklearn.tree as skt
    DTC = skt.DecisionTreeClassifier( max_depth=max_depth )
    DTC.fit( xTrain, yTrain )

    # ------------------------------------------------- #
    # --- [5] evalution of DTC                      --- #
    # ------------------------------------------------- #
    print( "[analyze__PCA_DTC] [[ Evaluation ]]" )
    print()
    print( "[analyze__PCA_DTC] accuracy      :: {}".format( DTC.score ) )

    
# ========================================================= #
# ===   Execution of Pragram                            === #
# ========================================================= #

if ( __name__=="__main__" ):
    analyze__PCA_DTC()
