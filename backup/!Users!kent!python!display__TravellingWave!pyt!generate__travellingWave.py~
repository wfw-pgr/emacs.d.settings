import numpy as np
import nkUtilities.load__constants as lcn
import nkUtilities.load__pointFile as lpf


# ========================================================= #
# ===  generate travelling wave                         === #
# ========================================================= #

def generate__travellingWave():

    # ------------------------------------------------- #
    # --- [1] Load Config & Eigenmode               --- #
    # ------------------------------------------------- #

    cnsFile  = "dat/parameter.conf"
    const    = lcn.load__constants( inpFile=cnsFile )

    wave1    = lpf.load__pointFile( inpFile=const["wavFile1"], returnType="point" )
    wave2    = lpf.load__pointFile( inpFile=const["wavFile2"], returnType="point" )

    # import nkUtilities.equiSpaceGrid as esg
    # x1MinMaxNum = [ 0.0, 1.0, 11 ]
    # x2MinMaxNum = [ 0.0, 1.0, 11 ]
    # x3MinMaxNum = [ 0.0, 0.0,  1 ]
    # grid        = esg.equiSpaceGrid( x1MinMaxNum=x1MinMaxNum, x2MinMaxNum=x2MinMaxNum, \
    #                                  x3MinMaxNum=x3MinMaxNum, returnType = "point" )
    # wave1       = np.sin( grid[:,1] * 2.0 * np.pi * 3.0 )
    # wave2       = np.cos( grid[:,1] * 2.0 * np.pi * 3.0 )
    # nField      = wave1.shape[0]
    # LI,LJ,LK    = x1MinMaxNum[2], x2MinMaxNum[2], x3MinMaxNum[2]
    
    # ------------------------------------------------- #
    # --- [2] synthesize field                      --- #
    # ------------------------------------------------- #
    
    # time_a  = np.linspace( const["t_start"], const["t_end"], const["nTime"] )
    # time_g  = np.repeat( time_a[None,:], nField, axis=0 )
    # phi     = 2.0 * np.pi * const["frequency"] * 1.e6 * time_g + const["phase"]

    # w_cos   = np.einsum( "ij,i->ij", np.cos( phi ), wave1 )
    # w_sin   = np.einsum( "ij,i->ij", np.sin( phi ), wave2 )

    # wave    = w_cos + w_sin
    # wave    = np.reshape( wave, ( LK,LJ,LI,const["nTime"] ) )
    # print( wave.shape )

    # ------------------------------------------------- #
    # --- [3] save in File                          --- #
    # ------------------------------------------------- #

    import nkVTKRoutines.convert__vtkStructuredGrid as vts
    outFile  = "png/wave{0:04}.vts"
    names    = ["wave"]
    grid     = np.reshape( grid, (LK,LJ,LI,3) )
    for ik in range( const["nTime"] ):
        wave_ = np.reshape( wave[:,:,:,ik], (LK,LJ,LI,1) )
        Data  = np.concatenate( [grid,wave_], axis=3 )
        vts.convert__vtkStructuredGrid( Data=Data, outFile=outFile.format(ik), names=names )
    
    


# ========================================================= #
# ===   実行部                                          === #
# ========================================================= #

if ( __name__=="__main__" ):
    generate__travellingWave()
