import numpy   as np
import os, sys, subprocess
import gmsh
# import gmsh_api.gmsh as gmsh



# ========================================================= #
# ===   generate__mesh_to_interpolate                   === #
# ========================================================= #

def generate__mesh_to_interpolate( lc1=0.0, lc2=0.0, radius=1.0, side="+" ):

    # ------------------------------------------------- #
    # --- [1] initialization of the gmsh            --- #
    # ------------------------------------------------- #
    gmsh.initialize()
    gmsh.option.setNumber( "General.Terminal", 1 )
    gmsh.model.add( "model" )

    # ------------------------------------------------- #
    # --- [2] Modeling                              --- #
    # ------------------------------------------------- #
    r1, r2  = 0.0, radius
    origin  = [ 0.0, 0.0 ]
    import nkGmshRoutines.generate__sector90 as s90
    if   ( side == "+" ):
        ret1    = s90.generate__sector90( lc=lc1, r1=r1, r2=r2, quadrant=1, \
                                          origin=origin, defineSurf=True )
        ret2    = s90.generate__sector90( lc=lc2, r1=r1, r2=r2, quadrant=4, \
                                          origin=origin, defineSurf=True )
    elif ( side == "-" ):
        ret1    = s90.generate__sector90( lc=lc1, r1=r1, r2=r2, quadrant=2, \
                                          origin=origin, defineSurf=True )
        ret2    = s90.generate__sector90( lc=lc2, r1=r1, r2=r2, quadrant=3, \
                                          origin=origin, defineSurf=True )

    elif ( side in ["+-","-+"] ):
        ret1    = s90.generate__sector90( lc=lc1, r1=r1, r2=r2, quadrant=1, \
                                          origin=origin, defineSurf=True )
        ret2    = s90.generate__sector90( lc=lc2, r1=r1, r2=r2, quadrant=2, \
                                          origin=origin, defineSurf=True )
        ret3    = s90.generate__sector90( lc=lc2, r1=r1, r2=r2, quadrant=3, \
                                          origin=origin, defineSurf=True )
        ret4    = s90.generate__sector90( lc=lc2, r1=r1, r2=r2, quadrant=4, \
                                          origin=origin, defineSurf=True )
        
    gmsh.model.occ.synchronize()
    gmsh.model.occ.removeAllDuplicates()
    gmsh.model.occ.synchronize()
    
    # ------------------------------------------------- #
    # --- [3] Mesh generation & save                --- #
    # ------------------------------------------------- #
    gmsh.model.occ.synchronize()
    gmsh.model.mesh.generate(2)
    gmsh.write( "msh/mesh2d.msh" )
    gmsh.finalize()

